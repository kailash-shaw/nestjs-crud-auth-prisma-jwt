var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.964,1,2.466]],["body/modules/AppModule.html",[0,1.347,1,4.902,2,1.168,3,1.168,4,1.314,5,1.314,6,1.168,7,1.314,8,1.314,9,2.523,10,2.523,11,3.828,12,0.021,13,3.828,14,3.828,15,3.828,16,3.828,17,3.828,18,3.828,19,3.828,20,1.901,21,1.314,22,1.314,23,0.177,24,0.157,25,0.157,26,2.953,27,2.933,28,0.409,29,0.504,30,2.953,31,1.859,32,2.953,33,2.953,34,2.953,35,2.24,36,1.314,37,2.953,38,2.953,39,2.953,40,2.953,41,2.953,42,2.953,43,2.953,44,1.859,45,2.953,46,2.953,47,2.24,48,1.492,49,2.953,50,2.953,51,1.168,52,2.953,53,2.953,54,2.953,55,2.523,56,0.177,57,0.092,58,0.012,59,0.012]],["title/controllers/AuthController.html",[60,1.199,61,2.466]],["body/controllers/AuthController.html",[12,0.021,23,0.167,24,0.148,25,0.148,28,0.321,29,0.474,56,0.167,57,0.086,58,0.012,59,0.012,60,0.928,61,2.806,62,0.928,63,2.375,64,1.504,65,2.78,66,0.366,67,1.443,68,3.492,69,3.492,70,2.375,71,3.91,72,1.097,73,3.099,74,4.087,75,2.372,76,3.183,77,2.78,78,5.343,79,5.343,80,4.087,81,4.565,82,5.693,83,5.343,84,1.012,85,2.78,86,0.655,87,2.78,88,1.443,89,1.224,90,1.097,91,2.7,92,1.443,93,2.375,94,4.087,95,4.087,96,3.099,97,2.78,98,4.087,99,2.78,100,2.78,101,1.75,102,1.75,103,1.909,104,2.82,105,2.375,106,2.573,107,2.375,108,3.675,109,4.141,110,4.141,111,1.504,112,1.165,113,2.78,114,2.78,115,1.504,116,3.099,117,2.78,118,2.211,119,3.492,120,2.78,121,2.78,122,1.443,123,2.78,124,2.78,125,2.78,126,2.78]],["title/classes/AuthDto.html",[57,0.112,71,2.09]],["body/classes/AuthDto.html",[12,0.021,23,0.233,24,0.206,25,0.206,28,0.31,51,2.293,56,0.31,57,0.18,58,0.015,59,0.015,66,0.511,71,3.003,72,1.386,84,0.827,86,0.827,106,2.441,112,1.625,127,1.295,128,2.941,129,1.724,130,3.375,131,4.399,132,1.826,133,3.914,134,3.914,135,4.884,136,3.878,137,3.878,138,4.409,139,3.878,140,3.878,141,3.914,142,3.139,143,2.747,144,1.726,145,4.247,146,3.984,147,3.914]],["title/modules/AuthModule.html",[0,0.964,11,2.261]],["body/modules/AuthModule.html",[0,1.59,2,1.599,3,1.599,4,1.8,5,1.8,6,1.599,7,2.636,8,1.8,11,4.361,12,0.021,20,2.361,21,1.8,22,1.8,23,0.243,24,0.215,25,0.215,27,2.777,28,0.392,29,0.689,56,0.243,57,0.126,58,0.015,59,0.015,61,4.067,62,1.772,104,3.899,105,3.454,148,3.454,149,3.454,150,4.218,151,4.043,152,4.043,153,4.043,154,3.066,155,3.454,156,4.043]],["title/injectables/AuthService.html",[104,2.09,157,0.864]],["body/injectables/AuthService.html",[12,0.021,23,0.135,24,0.119,25,0.119,28,0.344,29,0.382,31,1.411,56,0.135,57,0.07,58,0.01,59,0.01,66,0.295,67,1.226,68,2.967,69,2.967,70,2.967,71,3.327,76,2.268,84,0.768,86,0.768,88,1.691,89,1.434,90,1.286,91,2.149,92,1.501,93,2.967,104,2.021,107,1.915,122,1.501,130,3.19,132,1.206,147,1.7,154,1.7,157,0.836,158,0.939,159,1.915,160,3.283,161,4.252,162,1.755,163,1.7,164,2.268,165,3.225,166,4.79,167,3.225,168,3.632,169,2.241,170,2.385,171,2.241,172,2.385,173,2.241,174,2.241,175,2.149,176,2.241,177,3.473,178,4.092,179,2.677,180,2.186,181,1.7,182,2.241,183,1.915,184,1.539,185,3.473,186,2.241,187,2.92,188,2.241,189,2.207,190,3.473,191,3.015,192,2.241,193,2.241,194,1.915,195,2.241,196,2.301,197,3.473,198,1.546,199,2.634,200,1.915,201,3.633,202,2.241,203,2.241,204,2.241,205,2.787,206,2.301,207,4.252,208,2.241,209,1.915,210,3.473,211,3.473,212,2.241,213,2.241,214,2.241,215,2.241,216,2.241,217,1.915,218,2.241,219,4.252,220,2.241,221,2.241,222,2.241,223,2.241]],["title/classes/AuthToken.html",[57,0.112,106,2.261]],["body/classes/AuthToken.html",[12,0.021,23,0.245,24,0.217,25,0.217,28,0.32,51,2.35,56,0.32,57,0.185,58,0.015,59,0.015,66,0.537,71,2.371,72,1.094,84,0.653,86,0.653,106,3.357,112,1.708,127,1.361,128,3.09,129,1.781,130,2.371,131,3.09,132,1.788,133,3.09,134,3.09,135,4.783,138,3.481,141,4.044,142,3.216,143,2.815,144,1.814,145,4.331,146,4.082,147,4.964,224,4.075,225,4.075]],["title/classes/Book.html",[57,0.112,226,2.09]],["body/classes/Book.html",[12,0.021,23,0.214,24,0.189,25,0.189,28,0.334,36,1.584,51,1.407,56,0.293,57,0.111,58,0.014,59,0.014,66,0.469,72,1.679,75,1.96,84,1.035,86,1.003,127,1.189,129,1.627,132,1.909,189,1.329,226,2.834,227,2.699,228,3.231,229,2.822,230,3.814,231,2.328,232,4.744,233,3.559,234,3.041,235,2.444,236,4.162,237,3.559,238,3.559,239,3.559,240,3.559,241,2.834,242,2.444,243,2.462,244,3.041,245,2.444,246,3.041,247,2.444,248,3.041]],["title/controllers/BookController.html",[60,1.199,249,2.466]],["body/controllers/BookController.html",[12,0.021,23,0.146,24,0.129,25,0.129,28,0.364,29,0.413,48,1.225,56,0.146,57,0.075,58,0.011,59,0.011,60,0.81,62,0.81,64,1.311,66,0.319,67,1.302,72,1.442,84,0.861,86,0.861,88,1.896,89,1.608,90,1.442,92,1.896,101,2.811,102,2.322,111,1.311,112,1.016,115,1.311,122,1.896,132,1.76,160,3.643,180,3.986,198,1.079,226,3.422,249,2.533,250,2.071,251,2.071,252,4.465,253,4.465,254,3.689,255,4.465,256,4.465,257,2.424,258,3.427,259,2.424,260,2.424,261,2.424,262,2.424,263,2.424,264,2.858,265,2.424,266,4.264,267,2.424,268,3.427,269,2.424,270,1.838,271,2.424,272,2.424,273,3.427,274,2.424,275,2.424,276,1.838,277,2.424,278,1.838,279,1.526,280,2.598,281,2.071,282,2.424,283,3.689,284,2.424,285,1.225,286,1.664,287,1.664,288,1.664,289,1.225,290,1.526,291,2.322,292,2.424,293,2.424,294,2.424,295,2.424,296,1.526,297,2.424,298,1.838,299,3.386,300,2.424,301,2.424,302,2.424,303,1.838,304,2.424]],["title/modules/BookModule.html",[0,0.964,13,2.261]],["body/modules/BookModule.html",[0,1.599,2,1.617,3,1.617,4,1.821,5,1.821,6,1.617,7,2.651,8,1.821,12,0.021,13,4.231,20,2.38,21,1.821,22,1.821,23,0.246,24,0.217,25,0.217,27,2.809,28,0.394,29,0.698,35,3.103,36,1.821,56,0.246,57,0.127,58,0.015,59,0.015,62,1.786,89,1.225,226,2.38,241,2.38,247,3.672,249,4.09,280,3.911,281,3.495,285,2.067,305,3.495,306,3.495,307,4.091,308,4.091,309,3.495]],["title/injectables/BookService.html",[157,0.864,280,2.09]],["body/injectables/BookService.html",[12,0.021,23,0.132,24,0.116,25,0.116,28,0.326,29,0.373,36,0.974,48,1.106,51,1.348,56,0.132,57,0.068,58,0.01,59,0.01,66,0.288,67,1.204,84,0.87,86,0.87,88,1.917,89,1.626,90,1.458,92,1.81,96,2.586,122,1.81,132,1.708,157,0.821,158,0.918,160,3.573,162,1.723,180,3.877,187,1.503,189,2.25,191,2.983,196,1.184,205,1.984,206,2.267,226,3.908,229,0.918,231,0.918,243,1.723,251,2.914,264,2.39,268,3.52,280,1.984,285,1.723,286,1.503,287,1.503,288,1.503,310,1.87,311,3.411,312,3.411,313,3.411,314,3.411,315,2.189,316,3.579,317,2.189,318,3.411,319,3.411,320,2.189,321,3.411,322,2.189,323,3.411,324,2.189,325,3.411,326,2.189,327,3.411,328,2.189,329,1.503,330,1.87,331,1.87,332,2.189,333,2.914,334,1.87,335,2.914,336,1.87,337,2.914,338,1.87,339,2.914,340,2.914,341,1.87,342,1.87,343,2.189,344,1.87,345,2.189,346,1.87,347,1.87,348,1.87,349,2.189,350,3.411,351,2.189,352,2.914,353,2.189,354,1.87,355,1.87,356,1.87,357,2.189,358,1.87,359,1.66,360,2.189,361,1.87,362,2.189]],["title/controllers/BookmarkController.html",[60,1.199,363,2.466]],["body/controllers/BookmarkController.html",[12,0.021,23,0.147,24,0.13,25,0.13,28,0.341,29,0.416,56,0.147,57,0.076,58,0.011,59,0.011,60,0.815,62,0.815,64,1.321,66,0.322,67,1.309,72,1.446,84,0.864,86,0.864,88,1.902,89,1.613,90,1.446,91,3.144,92,1.902,101,2.823,102,2.823,103,1.676,111,1.321,112,1.023,115,1.321,122,1.902,175,3.576,179,3.993,198,1.086,270,1.851,276,1.851,279,1.536,289,1.233,290,1.536,291,2.334,296,1.536,298,1.851,299,3.401,303,1.851,363,2.546,364,2.085,365,2.441,366,3.831,367,3.831,368,3.831,369,3.831,370,3.168,371,2.085,372,3.153,373,2.441,374,2.085,375,5.585,376,2.085,377,2.441,378,2.085,379,3.153,380,2.085,381,2.441,382,2.085,383,2.441,384,2.085,385,2.441,386,1.851,387,4.279,388,1.851,389,1.676,390,2.441,391,2.609,392,2.085,393,2.441,394,2.441,395,2.441,396,2.441,397,5.009,398,2.441,399,2.441,400,2.085,401,2.441,402,2.085,403,2.441]],["title/modules/BookmarkModule.html",[0,0.964,14,2.261]],["body/modules/BookmarkModule.html",[0,1.653,2,1.733,3,1.733,4,1.951,5,1.951,6,1.733,7,2.74,8,1.951,12,0.021,14,4.31,20,2.488,21,1.951,22,1.951,23,0.263,24,0.233,25,0.233,28,0.37,29,0.747,56,0.263,57,0.136,58,0.016,59,0.016,62,1.867,363,4.227,391,3.984,392,3.746,404,3.746,405,3.746,406,4.384,407,4.384]],["title/injectables/BookmarkService.html",[157,0.864,391,2.09]],["body/injectables/BookmarkService.html",[12,0.021,23,0.134,24,0.119,25,0.119,28,0.255,29,0.381,56,0.134,57,0.069,58,0.01,59,0.01,66,0.295,67,1.224,76,1.642,84,0.878,86,0.878,88,1.934,89,1.64,90,1.471,91,3.064,92,1.828,115,1.21,122,1.689,157,0.835,158,0.937,160,3.281,162,1.13,163,1.696,164,2.266,170,2.381,172,2.381,175,3.537,179,3.972,181,1.696,184,1.536,189,1.586,191,2.784,196,1.876,205,2.017,206,1.876,264,2.768,366,2.962,367,2.962,368,3.628,369,2.962,370,2.962,371,2.962,372,3.012,374,2.962,375,5.609,378,1.91,379,3.012,382,2.962,384,2.962,391,2.017,408,1.91,409,2.236,410,2.236,411,2.236,412,2.236,413,2.236,414,2.236,415,2.236,416,2.236,417,6.064,418,2.236,419,3.467,420,3.467,421,3.467,422,3.467,423,3.467,424,3.467,425,3.467,426,2.236,427,2.236]],["title/classes/Category.html",[57,0.112,229,1.505]],["body/classes/Category.html",[12,0.021,23,0.23,24,0.204,25,0.204,28,0.308,36,1.707,51,1.516,56,0.347,57,0.119,58,0.015,59,0.015,66,0.505,72,1.549,75,2.037,84,0.925,86,0.925,118,3.571,127,1.281,129,1.711,132,1.746,189,1.432,198,1.707,229,2.147,231,2.418,232,4.629,241,2.981,242,2.633,243,1.938,245,2.633,428,2.633,429,3.835,430,3.835,431,3.835,432,4.377,433,2.908,434,3.885,435,3.885,436,2.908,437,2.414,438,2.633,439,3.276]],["title/controllers/CategoryController.html",[60,1.199,440,2.466]],["body/controllers/CategoryController.html",[12,0.021,23,0.147,24,0.13,25,0.13,28,0.374,29,0.417,48,1.236,56,0.147,57,0.076,58,0.011,59,0.011,60,0.817,62,0.817,64,1.324,66,0.322,67,1.311,72,1.448,84,0.864,86,0.864,88,1.904,89,1.7,90,1.448,91,2.981,92,1.904,101,2.338,102,2.338,103,1.68,111,1.324,112,1.025,115,1.324,118,2.713,122,1.904,175,2.869,180,3.157,198,1.089,229,1.557,243,1.236,266,4.284,268,3.444,270,1.855,276,1.855,279,1.54,285,1.236,286,1.68,287,1.68,288,1.68,289,1.236,290,1.54,291,2.338,296,1.54,298,1.855,299,2.817,303,1.855,376,2.09,380,2.09,386,1.855,387,3.837,388,1.855,400,2.09,402,2.09,433,2.817,440,2.551,441,2.09,442,3.174,443,3.174,444,3.174,445,3.837,446,3.837,447,2.09,448,3.157,449,2.446,450,2.446,451,2.446,452,2.09,453,2.446,454,4.85,455,2.09,456,2.446,457,2.09,458,4.284,459,2.446,460,2.09,461,3.157,462,2.446,463,2.613,464,2.09,465,2.551,466,2.446,467,3.715,468,2.446,469,2.446,470,2.446,471,2.446,472,2.446,473,2.446,474,2.446,475,2.446,476,2.446,477,2.446]],["title/modules/CategoryModule.html",[0,0.964,15,2.261]],["body/modules/CategoryModule.html",[0,1.593,2,1.605,3,1.605,4,1.807,5,1.807,6,1.605,7,2.641,8,1.807,12,0.021,15,4.222,20,2.368,21,1.807,22,1.807,23,0.244,24,0.216,25,0.216,27,2.787,28,0.393,29,0.692,35,3.078,36,1.807,56,0.244,57,0.126,58,0.015,59,0.015,62,1.777,89,1.215,229,1.701,241,2.362,285,2.051,309,3.468,438,3.653,440,4.075,463,3.903,464,3.468,478,3.468,479,3.468,480,4.059,481,4.059]],["title/injectables/CategoryService.html",[157,0.864,463,2.09]],["body/injectables/CategoryService.html",[12,0.021,23,0.116,24,0.103,25,0.103,28,0.309,29,0.329,36,0.859,48,0.975,51,1.22,56,0.116,57,0.06,58,0.009,59,0.009,66,0.254,67,1.09,84,0.825,86,0.825,88,1.816,89,1.54,90,1.381,91,2.729,92,1.702,96,2.341,122,1.702,157,0.743,158,0.809,160,3.478,162,1.56,175,2.599,180,3.736,181,1.463,187,1.325,189,2.161,191,2.993,196,1.67,198,1.374,205,2.565,206,2.922,229,2.352,231,0.809,243,1.56,264,2.836,268,3.312,285,0.975,286,1.325,287,1.325,288,1.325,316,3.296,329,1.325,330,1.648,331,1.648,333,2.637,334,1.648,335,2.637,336,1.648,337,2.637,338,1.648,339,2.637,340,2.637,341,1.648,342,1.648,344,3.296,346,1.648,347,1.648,352,3.767,354,2.637,355,2.637,356,2.637,358,1.648,359,2.341,361,1.648,442,2.637,443,2.637,444,2.637,445,2.637,446,3.296,447,2.637,448,2.776,452,2.637,454,3.767,455,2.637,457,2.637,460,1.648,461,2.776,463,1.796,482,1.648,483,1.929,484,1.929,485,3.087,486,1.929,487,2.637,488,1.929,489,1.929,490,3.087,491,3.087,492,3.087,493,3.858,494,1.929,495,1.929,496,3.087,497,1.929,498,1.929,499,3.087,500,3.087,501,1.929,502,1.929,503,1.929,504,1.929]],["title/classes/CreateBookDto.html",[57,0.112,258,2.466]],["body/classes/CreateBookDto.html",[12,0.021,23,0.208,24,0.184,25,0.184,28,0.287,56,0.208,57,0.148,58,0.014,59,0.014,66,0.457,72,1.663,75,1.933,84,0.993,86,0.993,127,1.157,129,1.597,132,1.897,142,3.551,143,2.934,144,1.542,228,3.186,229,2.684,230,3.76,231,2.295,258,3.284,285,1.751,505,5.472,506,2.627,507,6.092,508,5.904,509,2.96,510,2.96,511,2.96,512,2.96,513,2.96,514,2.96,515,2.627,516,2.96]],["title/classes/CreateBookmarkDto.html",[57,0.112,372,2.261]],["body/classes/CreateBookmarkDto.html",[12,0.021,23,0.249,24,0.22,25,0.22,28,0.249,56,0.249,57,0.167,58,0.015,59,0.015,66,0.545,72,1.609,75,2.115,84,0.96,86,0.96,90,1.447,127,1.383,129,1.8,132,1.912,142,3.241,143,3.005,144,1.843,231,2.511,372,3.392,517,5.421,518,3.14,519,5.118,520,3.14,521,3.537,522,5.388,523,3.537,524,3.537,525,3.135]],["title/classes/CreateCategoryDto.html",[57,0.112,448,2.261]],["body/classes/CreateCategoryDto.html",[12,0.021,23,0.225,24,0.199,25,0.199,28,0.303,56,0.303,57,0.156,58,0.014,59,0.014,66,0.493,72,1.529,75,2.011,84,0.913,86,0.913,90,1.352,112,1.567,118,3.623,127,1.249,129,1.682,132,1.728,142,3.081,143,2.697,144,1.664,145,4.185,198,1.664,231,2.387,433,3.819,434,3.819,435,3.819,436,2.835,448,3.17,515,2.835,525,2.93,526,4.622,527,2.567,528,3.738,529,3.738,530,3.738,531,3.738,532,3.738,533,3.738,534,3.194,535,3.738]],["title/classes/EditBookmarkDto.html",[57,0.112,379,2.261]],["body/classes/EditBookmarkDto.html",[12,0.021,23,0.245,24,0.217,25,0.217,28,0.245,56,0.245,57,0.166,58,0.015,59,0.015,66,0.537,72,1.596,75,2.099,84,0.953,86,0.953,90,1.803,127,1.361,129,1.781,132,1.904,142,2.205,143,2.987,144,1.814,231,2.492,379,3.357,518,3.09,519,5.079,520,4.508,521,3.481,523,3.481,524,3.481,525,3.669,536,5.388]],["title/classes/EditCategoryDto.html",[57,0.112,461,2.261]],["body/classes/EditCategoryDto.html",[12,0.021,23,0.245,24,0.217,25,0.217,28,0.245,56,0.245,57,0.166,58,0.015,59,0.015,66,0.537,72,1.596,75,2.099,84,0.953,86,0.953,90,1.803,118,3.216,127,1.361,129,1.781,132,1.904,142,2.205,143,2.987,144,1.814,231,2.492,461,3.357,520,4.508,525,3.669,527,2.798,534,3.481,537,5.388,538,4.075,539,4.075]],["title/classes/EditUserDto.html",[57,0.112,540,2.261]],["body/classes/EditUserDto.html",[12,0.021,23,0.218,24,0.192,25,0.192,28,0.296,51,1.432,56,0.218,57,0.153,58,0.014,59,0.014,66,0.477,72,1.505,84,0.898,86,0.898,90,1.743,112,1.518,127,1.21,129,1.646,130,3.26,132,1.841,133,4.249,134,3.738,135,4.923,141,3.738,143,2.654,144,1.612,145,4.13,146,3.848,525,3.5,540,3.103,541,5.139,542,3.094,543,5.603,544,5.603,545,3.621,546,3.621,547,4.929,548,4.929,549,3.621,550,4.929,551,3.621,552,4.211]],["title/controllers/FileUploadController.html",[60,1.199,553,2.466]],["body/controllers/FileUploadController.html",[12,0.021,23,0.181,24,0.16,25,0.363,28,0.368,29,0.514,44,2.728,47,2.285,48,1.523,51,1.191,55,2.574,56,0.181,57,0.094,58,0.012,59,0.012,60,1.006,62,1.006,64,1.63,66,0.397,67,1.53,72,0.809,73,2.285,75,1.53,84,0.483,86,0.483,88,1.064,89,1.297,90,0.809,92,1.064,102,1.897,108,3.287,111,1.63,112,1.263,116,2.285,122,1.064,189,1.895,196,1.63,205,1.753,206,1.63,278,3.287,279,1.897,289,1.523,290,1.897,296,1.897,329,2.069,552,2.574,553,2.976,554,2.976,555,2.574,556,6.122,557,4.334,558,3.013,559,5.075,560,3.013,561,3.013,562,2.574,563,3.013,564,4.334,565,3.013,566,3.013,567,4.334,568,4.334,569,3.013,570,3.013,571,3.013,572,3.013,573,3.013,574,3.013,575,3.013,576,3.013,577,3.013,578,3.013,579,5.075,580,4.334,581,3.013,582,3.013,583,3.013,584,3.013,585,3.013,586,5.075,587,3.013,588,3.013,589,3.013,590,3.013,591,3.013,592,3.013]],["title/modules/FileUploadModule.html",[0,0.964,16,2.261]],["body/modules/FileUploadModule.html",[0,1.64,2,1.705,3,1.705,4,1.919,5,1.919,6,1.705,7,2.718,8,1.919,12,0.021,16,4.291,20,2.462,21,1.919,22,1.919,23,0.259,24,0.229,25,0.325,28,0.367,29,0.735,44,2.714,56,0.259,57,0.134,58,0.016,59,0.016,62,1.848,553,4.194,554,2.961,593,3.683,594,3.683,595,4.291,596,4.312,597,4.312,598,4.312]],["title/injectables/FileUploadService.html",[157,0.864,595,2.261]],["body/injectables/FileUploadService.html",[12,0.02,23,0.314,24,0.277,25,0.277,28,0.314,29,0.89,44,3.286,56,0.314,57,0.162,58,0.018,59,0.018,157,1.499,158,2.188,554,3.584,595,3.919,599,4.459]],["title/classes/JwtGuard.html",[57,0.112,289,1.815]],["body/classes/JwtGuard.html",[12,0.021,23,0.299,24,0.264,25,0.264,28,0.299,56,0.299,57,0.154,58,0.017,59,0.017,86,0.797,127,1.66,162,3.292,289,3.055,437,3.806,600,4.246,601,6.046,602,4.971,603,4.971,604,3.769,605,3.769]],["title/injectables/JwtStrategy.html",[150,2.261,157,0.864]],["body/injectables/JwtStrategy.html",[12,0.021,23,0.206,24,0.182,25,0.182,28,0.371,29,0.585,31,2.159,51,1.356,56,0.206,57,0.107,58,0.014,59,0.014,66,0.452,67,1.676,76,2.58,84,0.761,86,0.761,88,1.676,89,1.422,90,1.275,92,1.211,122,1.676,150,2.989,155,2.931,157,1.143,158,1.438,160,2.947,162,2.4,164,2.784,165,4.131,167,3.601,168,4.458,170,3.74,172,2.356,184,2.356,187,2.356,189,1.281,191,1.996,198,1.527,199,2.601,209,2.931,217,2.931,264,1.733,437,2.989,604,2.601,605,2.601,606,2.931,607,4.749,608,4.749,609,2.931,610,3.43,611,4.749,612,3.43,613,3.43,614,3.43,615,2.931,616,3.43,617,3.43,618,3.43,619,3.43,620,3.43,621,3.43,622,3.43]],["title/injectables/ParseObjectIdPipePipe.html",[157,0.864,465,2.466]],["body/injectables/ParseObjectIdPipePipe.html",[12,0.021,23,0.237,24,0.209,25,0.209,28,0.313,29,0.671,56,0.237,57,0.122,58,0.015,59,0.015,66,0.519,67,1.84,84,0.631,86,0.631,88,1.39,89,1.179,90,1.057,92,1.39,122,1.39,157,1.255,158,1.65,189,1.47,194,3.363,200,3.363,201,3.363,205,2.29,206,2.13,264,3.144,329,2.703,458,5.529,465,3.58,623,4.453,624,5.315,625,4.453,626,3.363,627,5.845,628,5.213,629,5.213,630,3.936,631,2.985,632,3.936,633,5.213,634,3.936,635,3.936,636,5.213,637,3.936,638,3.936,639,3.936,640,3.936]],["title/modules/PrismaModule.html",[0,0.964,17,2.261]],["body/modules/PrismaModule.html",[0,1.64,2,1.705,3,1.705,4,1.919,5,1.919,6,1.705,7,2.718,8,2.718,12,0.02,17,4.364,20,2.462,21,1.919,22,1.919,23,0.259,24,0.229,25,0.229,28,0.332,29,0.735,56,0.259,57,0.134,58,0.016,59,0.016,164,3.428,641,3.683,642,3.683,643,3.683,644,4.312,645,5.532,646,4.312]],["title/injectables/PrismaService.html",[157,0.864,164,1.701]],["body/injectables/PrismaService.html",[12,0.021,23,0.243,24,0.215,25,0.215,28,0.356,29,0.689,31,2.545,56,0.243,57,0.126,58,0.015,59,0.015,66,0.533,67,1.873,84,0.648,86,0.851,88,1.427,89,1.211,90,1.086,92,1.427,157,1.277,158,1.695,162,2.043,164,2.513,167,3.066,168,4.768,437,3.34,562,3.454,605,3.066,609,4.533,647,3.454,648,5.922,649,6.287,650,4.043,651,4.043,652,3.066,653,4.043,654,4.043,655,4.043,656,5.306,657,4.043,658,4.043,659,4.043,660,4.043]],["title/classes/Product.html",[57,0.112,661,2.466]],["body/classes/Product.html",[12,0.021,23,0.21,24,0.185,25,0.185,28,0.356,36,1.552,51,1.379,56,0.289,57,0.108,58,0.014,59,0.014,66,0.46,72,1.667,75,1.94,84,1.029,86,0.995,127,1.165,129,1.604,132,1.82,175,2.427,189,1.302,228,3.197,229,2.85,230,3.773,231,2.303,232,4.725,234,2.98,235,2.395,236,4.104,241,2.795,242,2.395,243,2.427,244,2.98,245,2.395,246,2.98,661,3.299,662,2.645,663,3.488,664,3.488,665,3.488,666,3.488,667,3.488,668,3.488,669,2.645,670,2.98]],["title/controllers/ProductController.html",[60,1.199,671,2.466]],["body/controllers/ProductController.html",[12,0.021,23,0.302,24,0.267,25,0.267,28,0.365,29,0.856,56,0.302,57,0.156,58,0.017,59,0.017,60,1.676,62,1.676,64,2.715,111,2.715,112,2.103,291,3.828,661,3.446,671,4.176,672,4.287,673,5.018,674,5.018]],["title/modules/ProductModule.html",[0,0.964,18,2.261]],["body/modules/ProductModule.html",[0,1.653,2,1.733,3,1.733,4,1.951,5,1.951,6,1.733,7,2.74,8,1.951,12,0.021,18,4.31,20,2.488,21,1.951,22,1.951,23,0.263,24,0.233,25,0.233,28,0.37,29,0.747,56,0.263,57,0.136,58,0.016,59,0.016,62,1.867,671,4.227,675,3.746,676,3.746,677,4.31,678,4.384,679,4.384,680,4.384]],["title/injectables/ProductService.html",[157,0.864,677,2.261]],["body/injectables/ProductService.html",[12,0.02,23,0.317,24,0.28,25,0.28,28,0.317,29,0.899,56,0.317,57,0.164,58,0.018,59,0.018,157,1.508,158,2.21,677,3.943,681,4.505]],["title/classes/UpdateBookDto.html",[57,0.112,273,2.466]],["body/classes/UpdateBookDto.html",[12,0.021,23,0.208,24,0.184,25,0.184,28,0.287,56,0.208,57,0.148,58,0.014,59,0.014,66,0.457,72,1.663,75,1.933,84,0.993,86,0.993,127,1.157,129,1.597,132,1.897,143,2.934,144,1.542,228,3.186,229,2.684,230,3.76,231,2.295,273,3.284,285,1.751,506,2.627,507,6.092,509,2.96,510,2.96,511,2.96,512,2.96,513,2.96,514,2.96,515,2.627,516,2.96,525,3.819,682,5.472,683,5.904]],["title/classes/User.html",[57,0.112,76,1.701]],["body/classes/User.html",[12,0.021,23,0.237,24,0.209,25,0.209,28,0.313,36,1.752,51,2.061,56,0.313,57,0.122,58,0.015,59,0.015,66,0.519,72,1.569,76,2.469,84,0.937,86,0.937,89,1.75,127,1.315,129,1.741,130,3.62,131,4.432,132,1.886,189,1.47,232,4.567,235,2.703,241,3.033,242,2.703,243,1.989,245,2.703,432,4.453,437,2.478,684,2.985,685,3.936,686,3.936,687,3.936,688,3.936,689,3.936,690,3.936,691,3.936,692,2.985,693,3.363]],["title/controllers/UserController.html",[60,1.199,694,2.466]],["body/controllers/UserController.html",[12,0.021,23,0.143,24,0.126,25,0.126,28,0.362,29,0.405,48,1.2,56,0.143,57,0.074,58,0.01,59,0.01,60,1.472,62,0.793,64,1.284,66,0.313,67,1.282,72,0.975,73,1.8,75,2.061,76,3.115,81,3.102,84,0.792,86,0.582,88,1.282,89,1.32,90,0.975,91,2.495,92,1.282,101,2.285,103,1.63,108,2.753,109,2.028,110,3.766,111,1.284,112,0.995,115,1.284,116,1.8,118,2.879,119,2.028,122,1.556,130,3.096,132,1.25,175,2.689,178,2.028,179,2.775,278,2.753,279,1.494,289,1.2,290,1.494,291,2.285,296,2.775,348,3.102,359,2.753,386,1.8,388,3.343,389,1.63,487,3.102,540,3.349,652,1.8,694,2.493,695,2.028,696,2.374,697,4.409,698,4.409,699,3.631,700,3.631,701,3.102,702,3.631,703,2.028,704,2.374,705,2.374,706,3.631,707,3.631,708,3.631,709,3.631,710,3.631,711,2.374,712,3.631,713,2.374,714,2.374,715,2.374,716,4.409,717,3.766,718,2.374,719,2.028,720,2.028,721,2.565,722,2.028,723,2.374,724,2.374,725,2.374,726,2.374,727,2.374,728,2.374,729,3.631,730,3.631,731,2.374,732,3.631,733,2.374,734,2.374,735,2.374,736,2.374,737,2.374,738,2.374]],["title/modules/UserModule.html",[0,0.964,19,2.261]],["body/modules/UserModule.html",[0,1.65,2,1.726,3,1.726,4,1.943,5,1.943,6,1.726,7,2.734,8,1.943,12,0.021,19,4.306,20,2.482,21,1.943,22,1.943,23,0.262,24,0.232,25,0.232,28,0.369,29,0.744,56,0.262,57,0.136,58,0.016,59,0.016,62,1.862,694,4.219,721,3.98,722,3.73,739,3.73,740,3.73,741,4.366,742,4.366]],["title/injectables/UserService.html",[157,0.864,721,2.09]],["body/injectables/UserService.html",[12,0.021,23,0.227,24,0.201,25,0.201,28,0.344,29,0.644,56,0.227,57,0.117,58,0.015,59,0.015,66,0.498,67,1.791,76,2.403,84,0.813,86,0.813,88,1.791,89,1.519,90,1.362,91,3.093,92,1.334,115,2.045,122,1.334,157,1.221,158,1.584,160,3.098,162,1.91,163,2.866,164,2.899,170,3.484,172,2.595,175,2.894,179,3.193,184,2.595,189,1.411,191,2.199,196,2.045,198,1.682,199,2.866,264,1.91,540,3.853,701,4.334,703,4.334,719,3.229,720,3.229,721,2.952,743,3.229,744,3.779,745,3.779,746,3.779]],["title/coverage.html",[747,3.717]],["body/coverage.html",[6,0.958,12,0.021,25,0.129,44,2.322,57,0.207,58,0.011,59,0.011,60,1.964,61,1.664,63,2.071,71,1.41,76,1.148,84,0.389,104,1.41,106,1.526,128,2.797,150,1.526,157,1.524,159,2.071,164,1.148,206,1.311,226,1.41,227,2.797,229,1.016,247,1.664,249,1.664,250,2.071,258,1.664,264,1.864,273,1.664,280,1.41,289,1.225,310,2.071,363,1.664,364,2.071,372,1.526,379,1.526,389,1.664,391,1.41,408,2.071,428,2.533,438,1.664,440,1.664,441,2.071,448,1.526,461,1.526,463,1.41,465,1.664,482,2.071,505,2.071,506,2.797,517,2.071,518,2.797,526,1.838,527,2.533,536,2.071,537,2.071,540,1.526,541,2.071,542,2.071,553,1.664,554,2.533,555,2.071,595,1.526,599,2.071,600,2.071,606,2.071,623,2.071,624,3.151,625,2.071,626,2.071,647,2.071,661,1.664,662,2.797,669,1.838,671,1.664,672,2.071,677,1.526,681,2.071,682,2.071,684,2.797,692,1.838,694,1.664,695,2.071,721,1.41,743,2.071,747,1.838,748,2.424,749,2.424,750,2.424,751,2.071,752,5.37,753,7.249,754,6.209,755,4.991,756,2.071,757,2.424,758,5.881,759,3.689,760,2.424,761,2.424,762,5.881,763,5.37,764,2.424,765,2.424,766,2.424,767,2.424,768,2.424,769,2.424]],["title/dependencies.html",[3,1.708,770,2.562]],["body/dependencies.html",[3,1.748,12,0.021,29,0.754,31,2.783,36,1.968,47,3.353,48,2.234,57,0.175,58,0.016,59,0.016,144,1.968,154,3.353,165,3.353,183,3.777,243,2.234,604,3.353,615,4.802,652,3.353,771,6.18,772,4.421,773,4.421,774,4.421,775,4.421,776,4.421,777,4.421,778,4.421,779,4.421,780,4.421,781,4.421,782,4.421,783,4.421,784,4.421,785,4.421,786,4.421,787,4.421,788,4.421,789,4.421]],["title/miscellaneous/enumerations.html",[790,1.745,791,3.69]],["body/miscellaneous/enumerations.html",[12,0.021,58,0.017,59,0.017,66,0.628,118,3.615,198,2.622,428,3.273,434,5.067,435,5.067,436,4.468,526,3.614,527,4.046,631,5.303,790,2.773,791,4.071,792,4.071,793,4.766]],["title/miscellaneous/functions.html",[790,1.745,794,3.69]],["body/miscellaneous/functions.html",[6,2.688,12,0.018,58,0.018,59,0.018,66,0.724,756,4.695,790,3.197,794,4.695,795,5.495]],["title/index.html",[66,0.395,796,2.999,797,2.999]],["body/index.html",[12,0.021,24,0.2,58,0.015,59,0.015,75,1.329,146,3.925,228,2.191,747,2.856,798,3.765,799,3.765,800,5.061,801,3.765,802,3.765,803,3.765,804,3.765,805,3.765,806,3.765,807,5.716,808,3.765,809,3.765,810,3.765,811,3.765,812,6.709,813,3.765,814,3.765,815,3.765,816,6.567,817,3.765,818,3.765,819,5.061,820,3.765,821,3.765,822,3.765,823,3.765,824,5.061,825,5.061,826,3.765,827,3.765,828,3.765,829,5.061,830,5.061,831,3.765,832,3.765,833,3.765,834,3.765,835,3.765,836,3.217,837,3.765,838,3.765,839,3.765,840,3.765,841,3.765,842,3.765,843,3.765,844,3.765,845,3.765,846,3.765,847,3.765,848,3.765,849,3.765,850,3.765,851,3.765,852,3.765,853,3.217]],["title/modules.html",[2,1.938]],["body/modules.html",[1,3.143,2,1.809,11,2.881,12,0.016,13,2.881,14,2.881,15,2.881,16,2.881,17,2.881,18,2.881,19,2.881,58,0.016,59,0.016,836,6.124,854,7.168,855,7.168,856,7.168]],["title/overview.html",[857,4.187]],["body/overview.html",[0,0.846,1,4.903,2,1.245,3,1.245,4,1.402,5,1.402,6,1.245,7,1.402,8,1.402,9,2.691,10,2.691,11,4.023,12,0.021,13,3.765,14,3.765,15,3.765,16,3.765,17,3.911,18,3.765,19,3.765,20,1.991,21,1.402,22,1.402,58,0.013,59,0.013,62,1.052,104,3.027,127,1.052,148,2.691,149,2.691,150,3.274,158,1.32,164,3.027,280,3.027,305,2.691,306,2.691,391,3.027,404,2.691,405,2.691,463,3.027,478,2.691,479,2.691,593,2.691,594,2.691,595,3.274,641,2.691,642,2.691,643,2.691,675,2.691,676,2.691,677,3.274,721,3.027,739,2.691,740,2.691,857,2.691,858,3.15,859,3.15,860,3.15,861,3.15]],["title/properties.html",[129,1.443,770,2.562]],["body/properties.html",[12,0.021,58,0.018,59,0.018,75,1.91,129,1.807,228,3.148,853,4.622,862,5.41,863,5.41,864,5.41]],["title/miscellaneous/variables.html",[790,1.745,865,3.69]],["body/miscellaneous/variables.html",[12,0.021,58,0.015,59,0.015,66,0.548,122,1.907,132,1.179,189,1.552,196,3.247,227,3.152,235,2.854,247,3.71,248,3.551,389,3.71,428,2.854,438,3.71,439,3.551,631,4.995,662,3.152,669,4.097,670,3.551,684,3.152,692,4.097,693,3.551,717,3.551,751,3.551,790,2.418,792,3.551,865,3.551,866,4.157,867,4.157,868,4.157,869,4.157,870,6.587,871,4.157,872,4.157,873,4.157,874,4.157,875,4.157,876,4.157,877,4.157,878,4.157]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":863,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["0.31.2",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":337,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["1/5",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":860,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["123456",{"_index":138,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{}}}],["14",{"_index":861,"title":{},"body":{"overview.html":{}}}],["15m",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["2",{"_index":334,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["2/3",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["3.1.1",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":712,"title":{},"body":{"controllers/UserController.html":{}}}],["5.7.1",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":859,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["8.1.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":858,"title":{},"body":{"overview.html":{}}}],["access",{"_index":710,"title":{},"body":{"controllers/UserController.html":{}}}],["accesstoken",{"_index":147,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{}}}],["account",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["account'})@apibody({type",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["active",{"_index":434,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"miscellaneous/enumerations.html":{}}}],["amazing",{"_index":837,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":291,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apibody",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apiconsumes",{"_index":566,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":572,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apioperation",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["apioperation({summary",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":145,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/CreateCategoryDto.html":{},"classes/EditUserDto.html":{}}}],["apiproperty()@isstring()@isnotempty",{"_index":533,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["apiproperty()@isstring()@isoptional",{"_index":528,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["apiproperty({enum",{"_index":530,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["apiproperty({example",{"_index":133,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{}}}],["apiquery",{"_index":467,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiquery({name",{"_index":449,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiresponse",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["apitags(\"auth",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"bookmarks",{"_index":393,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["apitags(\"books",{"_index":292,"title":{},"body":{"controllers/BookController.html":{}}}],["apitags(\"category",{"_index":468,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags(\"file",{"_index":571,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["apitags(\"products",{"_index":673,"title":{},"body":{"controllers/ProductController.html":{}}}],["apitags(\"user",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":814,"title":{},"body":{"index.html":{}}}],["applications",{"_index":806,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argon",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(dto.password",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify(user.hash",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["argumentmetadata",{"_index":632,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["async",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["authcontroller",{"_index":61,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":71,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"coverage.html":{}}}],["authdto})@httpcode(200)@post('signup",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":603,"title":{},"body":{"classes/JwtGuard.html":{}}}],["authguard(\"jwt",{"_index":601,"title":{},"body":{"classes/JwtGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":228,"title":{},"body":{"classes/Book.html":{},"classes/CreateBookDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":104,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":106,"title":{"classes/AuthToken.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/AuthToken.html":{},"coverage.html":{}}}],["authtoken})@httpcode(200)@post('signin",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["await",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":838,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":329,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["badrequestexception(\"file",{"_index":590,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["badrequestexception(\"please",{"_index":354,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["badrequestexception(\"validation",{"_index":638,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["body",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["book",{"_index":226,"title":{"classes/Book.html":{}},"body":{"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"coverage.html":{}}}],["book.controller",{"_index":308,"title":{},"body":{"modules/BookModule.html":{}}}],["book.dto",{"_index":283,"title":{},"body":{"controllers/BookController.html":{}}}],["book.dto.ts",{"_index":506,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["book.dto.ts:14",{"_index":513,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["book.dto.ts:18",{"_index":511,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["book.dto.ts:22",{"_index":509,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["book.dto.ts:26",{"_index":512,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["book.dto.ts:29",{"_index":510,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["book.service",{"_index":281,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{}}}],["bookcontroller",{"_index":249,"title":{"controllers/BookController.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"coverage.html":{}}}],["bookmark",{"_index":417,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["bookmark.controller",{"_index":407,"title":{},"body":{"modules/BookmarkModule.html":{}}}],["bookmark.dto.ts",{"_index":518,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{},"coverage.html":{}}}],["bookmark.dto.ts:10",{"_index":521,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{}}}],["bookmark.dto.ts:14",{"_index":523,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{}}}],["bookmark.dto.ts:6",{"_index":524,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{}}}],["bookmark.service",{"_index":392,"title":{},"body":{"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{}}}],["bookmark.userid",{"_index":422,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["bookmarkcontroller",{"_index":363,"title":{"controllers/BookmarkController.html":{}},"body":{"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"coverage.html":{}}}],["bookmarkid",{"_index":375,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["bookmarkmodule",{"_index":14,"title":{"modules/BookmarkModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookmarkModule.html":{},"modules.html":{},"overview.html":{}}}],["bookmarks",{"_index":365,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["bookmarkservice",{"_index":391,"title":{"injectables/BookmarkService.html":{}},"body":{"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"coverage.html":{},"overview.html":{}}}],["bookmodel",{"_index":318,"title":{},"body":{"injectables/BookService.html":{}}}],["bookmodule",{"_index":13,"title":{"modules/BookModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{},"modules.html":{},"overview.html":{}}}],["books",{"_index":251,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{}}}],["bookschema",{"_index":247,"title":{},"body":{"classes/Book.html":{},"modules/BookModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bookservice",{"_index":280,"title":{"injectables/BookService.html":{}},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"coverage.html":{},"overview.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":856,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":854,"title":{},"body":{"modules.html":{}}}],["building",{"_index":801,"title":{},"body":{"index.html":{}}}],["callback",{"_index":580,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["callback(null",{"_index":586,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["catch",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["category",{"_index":229,"title":{"classes/Category.html":{}},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["category.controller",{"_index":481,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.dto.ts",{"_index":527,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/EditCategoryDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["category.dto.ts:10",{"_index":538,"title":{},"body":{"classes/EditCategoryDto.html":{}}}],["category.dto.ts:14",{"_index":534,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/EditCategoryDto.html":{}}}],["category.dto.ts:19",{"_index":529,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:24",{"_index":532,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:6",{"_index":539,"title":{},"body":{"classes/EditCategoryDto.html":{}}}],["category.schema",{"_index":668,"title":{},"body":{"classes/Product.html":{}}}],["category.service",{"_index":464,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categorycontroller",{"_index":440,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categoryid",{"_index":454,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["categorymodel",{"_index":485,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorymodule",{"_index":15,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryschema",{"_index":438,"title":{},"body":{"classes/Category.html":{},"modules/CategoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryservice",{"_index":463,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["check",{"_index":420,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["class",{"_index":57,"title":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/JwtGuard.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":127,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/JwtGuard.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cleandb",{"_index":649,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_bookmarkmodule",{"_index":404,"title":{},"body":{"modules/BookmarkModule.html":{},"overview.html":{}}}],["cluster_bookmarkmodule_providers",{"_index":405,"title":{},"body":{"modules/BookmarkModule.html":{},"overview.html":{}}}],["cluster_bookmodule",{"_index":305,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_bookmodule_providers",{"_index":306,"title":{},"body":{"modules/BookModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":478,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":479,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule",{"_index":593,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_fileuploadmodule_providers",{"_index":594,"title":{},"body":{"modules/FileUploadModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":641,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":642,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":643,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_productmodule",{"_index":675,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_productmodule_providers",{"_index":676,"title":{},"body":{"modules/ProductModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":739,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":740,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":716,"title":{},"body":{"controllers/UserController.html":{}}}],["config",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["config.get(\"database_url",{"_index":656,"title":{},"body":{"injectables/PrismaService.html":{}}}],["config.get(\"jwt_secret",{"_index":620,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["connected",{"_index":658,"title":{},"body":{"injectables/PrismaService.html":{}}}],["connection",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log",{"_index":348,"title":{},"body":{"injectables/BookService.html":{},"controllers/UserController.html":{}}}],["console.log(\"db",{"_index":657,"title":{},"body":{"injectables/PrismaService.html":{}}}],["console.log(\"dto",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(\"file",{"_index":581,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["console.log(\"getuser",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(\"userid",{"_index":737,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(file",{"_index":592,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["console.log(hash",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(passmatch",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/Book.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"classes/Product.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["constructor(bookmodel",{"_index":315,"title":{},"body":{"injectables/BookService.html":{}}}],["constructor(categorymodel",{"_index":483,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(config",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller(\"auth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(\"bookmarks",{"_index":394,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["controller(\"books",{"_index":293,"title":{},"body":{"controllers/BookController.html":{}}}],["controller(\"category",{"_index":469,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller(\"file",{"_index":573,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["controller(\"product",{"_index":674,"title":{},"body":{"controllers/ProductController.html":{}}}],["controller(\"users",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["core",{"_index":288,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["correct",{"_index":356,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["coverage",{"_index":747,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["create(book",{"_index":319,"title":{},"body":{"injectables/BookService.html":{}}}],["createbook",{"_index":252,"title":{},"body":{"controllers/BookController.html":{}}}],["createbook(book",{"_index":257,"title":{},"body":{"controllers/BookController.html":{}}}],["createbookdto",{"_index":258,"title":{"classes/CreateBookDto.html":{}},"body":{"controllers/BookController.html":{},"classes/CreateBookDto.html":{},"coverage.html":{}}}],["createbookmark",{"_index":366,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["createbookmark(userid",{"_index":371,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["createbookmarkdto",{"_index":372,"title":{"classes/CreateBookmarkDto.html":{}},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"classes/CreateBookmarkDto.html":{},"coverage.html":{}}}],["createcategory",{"_index":442,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcategory(@body",{"_index":473,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcategory(dto",{"_index":447,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcategorydto",{"_index":448,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["created",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["createparamdecorator",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentpage",{"_index":335,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["custom",{"_index":733,"title":{},"body":{"controllers/UserController.html":{}}}],["data",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["datasources",{"_index":653,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date.now",{"_index":582,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["db",{"_index":654,"title":{},"body":{"injectables/PrismaService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorator",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["decorator/auth.decorator",{"_index":390,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["decorator/index",{"_index":718,"title":{},"body":{"controllers/UserController.html":{}}}],["decorators",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["delete(\":id",{"_index":303,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["delete(':id",{"_index":262,"title":{},"body":{"controllers/BookController.html":{}}}],["deletebook",{"_index":253,"title":{},"body":{"controllers/BookController.html":{}}}],["deletebook(id",{"_index":261,"title":{},"body":{"controllers/BookController.html":{}}}],["deletebookmarkbyid",{"_index":367,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["deletebookmarkbyid(userid",{"_index":374,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["deletebyid",{"_index":311,"title":{},"body":{"injectables/BookService.html":{}}}],["deletebyid(id",{"_index":321,"title":{},"body":{"injectables/BookService.html":{}}}],["deletecategorybyid",{"_index":443,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["deletecategorybyid(@param(\"id",{"_index":476,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deletecategorybyid(categoryid",{"_index":452,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["deleted",{"_index":436,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"miscellaneous/enumerations.html":{}}}],["denied",{"_index":425,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"controllers/FileUploadController.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"controllers/UserController.html":{},"index.html":{},"properties.html":{}}}],["dest",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["destination",{"_index":577,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["details",{"_index":706,"title":{},"body":{"controllers/UserController.html":{}}}],["development",{"_index":815,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":567,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["document",{"_index":432,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["documentation",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto.email",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.password",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/auth.dto",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":282,"title":{},"body":{"controllers/BookController.html":{}}}],["dto/edit",{"_index":719,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":284,"title":{},"body":{"controllers/BookController.html":{}}}],["duplicate",{"_index":690,"title":{},"body":{"classes/User.html":{}}}],["e2e",{"_index":826,"title":{},"body":{"index.html":{}}}],["edit",{"_index":496,"title":{},"body":{"injectables/CategoryService.html":{}}}],["editbookmarkbyid",{"_index":368,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["editbookmarkbyid(userid",{"_index":378,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["editbookmarkdto",{"_index":379,"title":{"classes/EditBookmarkDto.html":{}},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"classes/EditBookmarkDto.html":{},"coverage.html":{}}}],["editcategorydto",{"_index":461,"title":{"classes/EditCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/EditCategoryDto.html":{},"coverage.html":{}}}],["edituser",{"_index":701,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["edituser(@getuser(\"id",{"_index":736,"title":{},"body":{"controllers/UserController.html":{}}}],["edituser(userid",{"_index":703,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["edituserdto",{"_index":540,"title":{"classes/EditUserDto.html":{}},"body":{"classes/EditUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["edituserdto})@httpcode(200)@get('me",{"_index":714,"title":{},"body":{"controllers/UserController.html":{}}}],["efficient",{"_index":802,"title":{},"body":{"index.html":{}}}],["email",{"_index":130,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["enter",{"_index":355,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["entered",{"_index":691,"title":{},"body":{"classes/User.html":{}}}],["enum",{"_index":433,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{}}}],["enumerations",{"_index":791,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["error.code",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["example",{"_index":146,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expected",{"_index":640,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["expiresin",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":559,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["express.request",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["expressquery",{"_index":266,"title":{},"body":{"controllers/BookController.html":{},"controllers/CategoryController.html":{}}}],["ext",{"_index":583,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["extends",{"_index":437,"title":{},"body":{"classes/Category.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/User.html":{}}}],["extname",{"_index":569,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["extname(file.originalname",{"_index":584,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["extractjwt",{"_index":614,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":617,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":639,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["false",{"_index":552,"title":{},"body":{"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{}}}],["false})@isstring()@isoptional",{"_index":548,"title":{},"body":{"classes/EditUserDto.html":{}}}],["file",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["file.originalname.match(/\\.(jpg|jpeg|png|gif",{"_index":588,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["filefilter",{"_index":587,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["fileinterceptor",{"_index":565,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["fileinterceptor(\"file",{"_index":575,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["filename",{"_index":579,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["fileuploadcontroller",{"_index":553,"title":{"controllers/FileUploadController.html":{}},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"coverage.html":{}}}],["fileuploadmodule",{"_index":16,"title":{"modules/FileUploadModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileUploadModule.html":{},"modules.html":{},"overview.html":{}}}],["fileuploadservice",{"_index":595,"title":{"injectables/FileUploadService.html":{}},"body":{"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":344,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["findall",{"_index":312,"title":{},"body":{"injectables/BookService.html":{}}}],["findall(query",{"_index":323,"title":{},"body":{"injectables/BookService.html":{}}}],["findbyid",{"_index":313,"title":{},"body":{"injectables/BookService.html":{}}}],["findbyid(id",{"_index":325,"title":{},"body":{"injectables/BookService.html":{}}}],["firstname",{"_index":543,"title":{},"body":{"classes/EditUserDto.html":{}}}],["forbidden",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["forbidden.'})@apiresponse({status",{"_index":713,"title":{},"body":{"controllers/UserController.html":{}}}],["forbiddenexception",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{}}}],["forbiddenexception(\"access",{"_index":423,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["forbiddenexception(\"credentials",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["found",{"_index":359,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{},"controllers/UserController.html":{}}}],["framework",{"_index":800,"title":{},"body":{"index.html":{}}}],["function",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":794,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(\":id",{"_index":298,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["get(\"me",{"_index":728,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id",{"_index":270,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["getallbooks",{"_index":254,"title":{},"body":{"controllers/BookController.html":{}}}],["getallbooks(@query",{"_index":294,"title":{},"body":{"controllers/BookController.html":{}}}],["getallbooks(query",{"_index":265,"title":{},"body":{"controllers/BookController.html":{}}}],["getbook",{"_index":255,"title":{},"body":{"controllers/BookController.html":{}}}],["getbook(id",{"_index":269,"title":{},"body":{"controllers/BookController.html":{}}}],["getbookmarkbyid",{"_index":369,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["getbookmarkbyid(userid",{"_index":382,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["getbookmarks",{"_index":370,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["getbookmarks(@getuser(\"id",{"_index":395,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["getbookmarks(userid",{"_index":384,"title":{},"body":{"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{}}}],["getcategory",{"_index":444,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getcategory(@query",{"_index":470,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getcategory(query",{"_index":455,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getcategorybyid",{"_index":445,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getcategorybyid(categoryid",{"_index":457,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["getme",{"_index":702,"title":{},"body":{"controllers/UserController.html":{}}}],["getme(@getuser",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["getme(@req",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["getme(user",{"_index":705,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":796,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":389,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser(\"email",{"_index":735,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(\"id",{"_index":397,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["global",{"_index":645,"title":{},"body":{"modules/PrismaModule.html":{}}}],["grow",{"_index":833,"title":{},"body":{"index.html":{}}}],["guard",{"_index":697,"title":{},"body":{"controllers/UserController.html":{}}}],["guard/index",{"_index":290,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["hash",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["help",{"_index":729,"title":{},"body":{"controllers/UserController.html":{}}}],["here",{"_index":844,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["httpcode(200",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":402,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["httpcode(httpstatus.no_content)@delete(':id",{"_index":376,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["httpcode(httpstatus.ok",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["https://nestjs.com",{"_index":850,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":386,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["id",{"_index":264,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["identifier",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":618,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":591,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["implements",{"_index":635,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{}}}],["inactive",{"_index":435,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"miscellaneous/enumerations.html":{}}}],["incorrect",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":66,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index.schema",{"_index":244,"title":{},"body":{"classes/Book.html":{},"classes/Product.html":{}}}],["info",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":708,"title":{},"body":{"controllers/UserController.html":{}}}],["injectable",{"_index":157,"title":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/FileUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/FileUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"injectables/FileUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"injectables/ProductService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":331,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["injectmodel(book.name",{"_index":332,"title":{},"body":{"injectables/BookService.html":{}}}],["injectmodel(category.name",{"_index":497,"title":{},"body":{"injectables/CategoryService.html":{}}}],["installation",{"_index":811,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":813,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["isemail",{"_index":141,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{}}}],["isempty",{"_index":514,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["isenum",{"_index":515,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateBookDto.html":{}}}],["isenum(status",{"_index":535,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isglobal",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":142,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{}}}],["isnotempty()@isstring",{"_index":508,"title":{},"body":{"classes/CreateBookDto.html":{}}}],["isnumber",{"_index":516,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["isoptional",{"_index":525,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/UpdateBookDto.html":{}}}],["isoptional()@isstring",{"_index":683,"title":{},"body":{"classes/UpdateBookDto.html":{}}}],["isstring",{"_index":143,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/UpdateBookDto.html":{}}}],["isstring()@isnotempty",{"_index":522,"title":{},"body":{"classes/CreateBookmarkDto.html":{}}}],["isstring()@isoptional",{"_index":520,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{}}}],["isvalidid",{"_index":352,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["join",{"_index":840,"title":{},"body":{"index.html":{}}}],["json",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwt",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":616,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":289,"title":{"classes/JwtGuard.html":{}},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"classes/JwtGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":150,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kailash",{"_index":547,"title":{},"body":{"classes/EditUserDto.html":{}}}],["kailash@gmail.com",{"_index":134,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{}}}],["kamil",{"_index":847,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":339,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["lastname",{"_index":544,"title":{},"body":{"classes/EditUserDto.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["level",{"_index":700,"title":{},"body":{"controllers/UserController.html":{}}}],["license",{"_index":853,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":830,"title":{},"body":{"index.html":{}}}],["limit(resperpage",{"_index":346,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["link",{"_index":519,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"classes/EditBookmarkDto.html":{}}}],["list",{"_index":490,"title":{},"body":{"injectables/CategoryService.html":{}}}],["logged",{"_index":707,"title":{},"body":{"controllers/UserController.html":{}}}],["login",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["login'})@apibody({type",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["login'})@apiresponse({status",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["matching",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":699,"title":{},"body":{"controllers/UserController.html":{}}}],["metadata",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":790,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":829,"title":{},"body":{"index.html":{}}}],["mode",{"_index":819,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo/book/book.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["mongo/category/category.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["mongo/product/product.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodb",{"_index":634,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["mongoose",{"_index":243,"title":{},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Product.html":{},"classes/User.html":{},"dependencies.html":{}}}],["mongoose.isvalidobjectid(categoryid",{"_index":499,"title":{},"body":{"injectables/CategoryService.html":{}}}],["mongoose.isvalidobjectid(id",{"_index":353,"title":{},"body":{"injectables/BookService.html":{}}}],["mongoose.model",{"_index":316,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["mongoose.objectid",{"_index":493,"title":{},"body":{"injectables/CategoryService.html":{}}}],["mongoose.schema.types.objectid",{"_index":246,"title":{},"body":{"classes/Book.html":{},"classes/Product.html":{}}}],["mongoosemodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/BookModule.html":{},"modules/CategoryModule.html":{}}}],["mongoosemodule.forfeature",{"_index":309,"title":{},"body":{"modules/BookModule.html":{},"modules/CategoryModule.html":{}}}],["mongoosemodule.forroot(process.env.mongo_database_url",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":843,"title":{},"body":{"index.html":{}}}],["multer",{"_index":568,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["multer.'})@post('upload')@useinterceptors(undefined",{"_index":560,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["multermodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql/auth/auth.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql/bookmark/bookmark.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql/file",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql/user/user.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["myśliwiec",{"_index":848,"title":{},"body":{"index.html":{}}}],["name",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["name}${ext",{"_index":585,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["nest",{"_index":807,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":852,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"classes/Book.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Product.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":604,"title":{},"body":{"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/AuthToken.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["new",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["node.js",{"_index":799,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":330,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["notfoundexception(\"book",{"_index":358,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["notfoundexception(\"category",{"_index":502,"title":{},"body":{"injectables/CategoryService.html":{}}}],["null",{"_index":622,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["number",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Product.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["number(query.page",{"_index":336,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["object",{"_index":624,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["object.assign(book",{"_index":349,"title":{},"body":{"injectables/BookService.html":{}}}],["objectid",{"_index":458,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["objectid.createfromhexstring(value",{"_index":637,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["open",{"_index":831,"title":{},"body":{"index.html":{}}}],["optional",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":342,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["out",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":857,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owns",{"_index":421,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["p2002",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":770,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pagination",{"_index":492,"title":{},"body":{"injectables/CategoryService.html":{}}}],["param",{"_index":276,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["param(\"id",{"_index":299,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["parameters",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parseintpipe",{"_index":387,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["parseobjectidpipepipe",{"_index":465,"title":{"injectables/ParseObjectIdPipePipe.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["passmatch",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":615,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":613,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":131,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/User.html":{}}}],["patch",{"_index":388,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["patch(\":id",{"_index":400,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["patch(':id",{"_index":380,"title":{},"body":{"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{}}}],["path",{"_index":570,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["payload",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":621,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipe.pipe.ts",{"_index":626,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["pipe.pipe.ts:11",{"_index":630,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["pipe/parse",{"_index":625,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["pipes/index.pipes",{"_index":466,"title":{},"body":{"controllers/CategoryController.html":{}}}],["pipetransform",{"_index":633,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["please",{"_index":841,"title":{},"body":{"index.html":{}}}],["populate(\"category",{"_index":345,"title":{},"body":{"injectables/BookService.html":{}}}],["post",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{}}}],["post(\"signin",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"signup",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"upload",{"_index":574,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["post()@useguards(jwtguard",{"_index":259,"title":{},"body":{"controllers/BookController.html":{}}}],["prefix",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/ProductController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":230,"title":{},"body":{"classes/Book.html":{},"classes/CreateBookDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{}}}],["prisma",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["prisma.service",{"_index":646,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":652,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["prisma/client/runtime/library",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/prisma.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["prisma/prisma.service",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":648,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismamodule",{"_index":17,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":164,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/CategoryService.html":{},"injectables/JwtStrategy.html":{}}}],["product",{"_index":661,"title":{"classes/Product.html":{}},"body":{"classes/Product.html":{},"controllers/ProductController.html":{},"coverage.html":{}}}],["product.controller",{"_index":680,"title":{},"body":{"modules/ProductModule.html":{}}}],["product.service",{"_index":679,"title":{},"body":{"modules/ProductModule.html":{}}}],["productcontroller",{"_index":671,"title":{"controllers/ProductController.html":{}},"body":{"controllers/ProductController.html":{},"modules/ProductModule.html":{},"coverage.html":{}}}],["production",{"_index":821,"title":{},"body":{"index.html":{}}}],["productmodule",{"_index":18,"title":{"modules/ProductModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductModule.html":{},"modules.html":{},"overview.html":{}}}],["productschema",{"_index":669,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productservice",{"_index":677,"title":{"injectables/ProductService.html":{}},"body":{"modules/ProductModule.html":{},"injectables/ProductService.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":798,"title":{},"body":{"index.html":{}}}],["project",{"_index":832,"title":{},"body":{"index.html":{}}}],["promise",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["prop",{"_index":232,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["prop({type",{"_index":234,"title":{},"body":{"classes/Book.html":{},"classes/Product.html":{}}}],["prop({unique",{"_index":685,"title":{},"body":{"classes/User.html":{}}}],["properties",{"_index":129,"title":{"properties.html":{}},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":627,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["put",{"_index":277,"title":{},"body":{"controllers/BookController.html":{}}}],["put(\":id",{"_index":301,"title":{},"body":{"controllers/BookController.html":{}}}],["put(':id",{"_index":274,"title":{},"body":{"controllers/BookController.html":{}}}],["query",{"_index":268,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["query.keyword",{"_index":340,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["read",{"_index":842,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":507,"title":{},"body":{"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["record",{"_index":487,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/UserController.html":{}}}],["ref",{"_index":236,"title":{},"body":{"classes/Book.html":{},"classes/Product.html":{}}}],["reflect",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":341,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["repository",{"_index":810,"title":{},"body":{"index.html":{}}}],["req",{"_index":278,"title":{},"body":{"controllers/BookController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["req.user",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["request",{"_index":717,"title":{},"body":{"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":135,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/EditUserDto.html":{}}}],["res",{"_index":350,"title":{},"body":{"injectables/BookService.html":{}}}],["reset",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":424,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["resperpage",{"_index":333,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["results",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["route",{"_index":698,"title":{},"body":{"controllers/UserController.html":{}}}],["run",{"_index":816,"title":{},"body":{"index.html":{}}}],["runvalidators",{"_index":361,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["rxjs",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":803,"title":{},"body":{"index.html":{}}}],["schema",{"_index":241,"title":{},"body":{"classes/Book.html":{},"modules/BookModule.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["schemafactory",{"_index":242,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(book",{"_index":248,"title":{},"body":{"classes/Book.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(category",{"_index":439,"title":{},"body":{"classes/Category.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(product",{"_index":670,"title":{},"body":{"classes/Product.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":693,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/index.schema",{"_index":285,"title":{},"body":{"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/UpdateBookDto.html":{}}}],["search",{"_index":491,"title":{},"body":{"injectables/CategoryService.html":{}}}],["secret",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":619,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["serve",{"_index":286,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["server",{"_index":804,"title":{},"body":{"index.html":{}}}],["shaw",{"_index":550,"title":{},"body":{"classes/EditUserDto.html":{}}}],["side",{"_index":805,"title":{},"body":{"index.html":{}}}],["sign",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(dto",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sing",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["single",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["singntoken",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["singntoken(userid",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["skip",{"_index":338,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["skip(skip",{"_index":347,"title":{},"body":{"injectables/BookService.html":{},"injectables/CategoryService.html":{}}}],["source",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"modules/BookModule.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"modules/BookmarkModule.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"controllers/ProductController.html":{},"modules/ProductModule.html":{},"injectables/ProductService.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":835,"title":{},"body":{"index.html":{}}}],["src/.../auth.decorator.ts",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../book.schema.ts",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../category.schema.ts",{"_index":792,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":793,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../product.schema.ts",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["src/decorator/auth.decorator.ts",{"_index":751,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guard/jwt.guard.ts",{"_index":600,"title":{},"body":{"classes/JwtGuard.html":{},"coverage.html":{}}}],["src/guard/jwt.guard.ts:3",{"_index":602,"title":{},"body":{"classes/JwtGuard.html":{}}}],["src/main.ts",{"_index":756,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mongo/book/book.controller.ts",{"_index":250,"title":{},"body":{"controllers/BookController.html":{},"coverage.html":{}}}],["src/mongo/book/book.controller.ts:30",{"_index":267,"title":{},"body":{"controllers/BookController.html":{}}}],["src/mongo/book/book.controller.ts:36",{"_index":260,"title":{},"body":{"controllers/BookController.html":{}}}],["src/mongo/book/book.controller.ts:44",{"_index":271,"title":{},"body":{"controllers/BookController.html":{}}}],["src/mongo/book/book.controller.ts:52",{"_index":275,"title":{},"body":{"controllers/BookController.html":{}}}],["src/mongo/book/book.controller.ts:62",{"_index":263,"title":{},"body":{"controllers/BookController.html":{}}}],["src/mongo/book/book.module.ts",{"_index":307,"title":{},"body":{"modules/BookModule.html":{}}}],["src/mongo/book/book.service.ts",{"_index":310,"title":{},"body":{"injectables/BookService.html":{},"coverage.html":{}}}],["src/mongo/book/book.service.ts:17",{"_index":317,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/book.service.ts:23",{"_index":324,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/book.service.ts:45",{"_index":320,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/book.service.ts:54",{"_index":326,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/book.service.ts:70",{"_index":328,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/book.service.ts:77",{"_index":322,"title":{},"body":{"injectables/BookService.html":{}}}],["src/mongo/book/dto/create",{"_index":505,"title":{},"body":{"classes/CreateBookDto.html":{},"coverage.html":{}}}],["src/mongo/book/dto/update",{"_index":682,"title":{},"body":{"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["src/mongo/category/category.controller.ts",{"_index":441,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/mongo/category/category.controller.ts:35",{"_index":456,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/mongo/category/category.controller.ts:40",{"_index":459,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/mongo/category/category.controller.ts:48",{"_index":451,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/mongo/category/category.controller.ts:53",{"_index":462,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/mongo/category/category.controller.ts:62",{"_index":453,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/mongo/category/category.module.ts",{"_index":480,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/mongo/category/category.service.ts",{"_index":482,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/mongo/category/category.service.ts:18",{"_index":484,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/category.service.ts:25",{"_index":489,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/category.service.ts:46",{"_index":494,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/category.service.ts:63",{"_index":486,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/category.service.ts:72",{"_index":495,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/category.service.ts:95",{"_index":488,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/mongo/category/dto/create",{"_index":526,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/mongo/category/dto/edit",{"_index":537,"title":{},"body":{"classes/EditCategoryDto.html":{},"coverage.html":{}}}],["src/mongo/product/product.controller.ts",{"_index":672,"title":{},"body":{"controllers/ProductController.html":{},"coverage.html":{}}}],["src/mongo/product/product.module.ts",{"_index":678,"title":{},"body":{"modules/ProductModule.html":{}}}],["src/mongo/product/product.service.ts",{"_index":681,"title":{},"body":{"injectables/ProductService.html":{},"coverage.html":{}}}],["src/mongo/schemas/book.schema.ts",{"_index":227,"title":{},"body":{"classes/Book.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mongo/schemas/book.schema.ts:10",{"_index":240,"title":{},"body":{"classes/Book.html":{}}}],["src/mongo/schemas/book.schema.ts:13",{"_index":238,"title":{},"body":{"classes/Book.html":{}}}],["src/mongo/schemas/book.schema.ts:16",{"_index":233,"title":{},"body":{"classes/Book.html":{}}}],["src/mongo/schemas/book.schema.ts:19",{"_index":239,"title":{},"body":{"classes/Book.html":{}}}],["src/mongo/schemas/book.schema.ts:22",{"_index":237,"title":{},"body":{"classes/Book.html":{}}}],["src/mongo/schemas/category.schema.ts",{"_index":428,"title":{},"body":{"classes/Category.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/mongo/schemas/category.schema.ts:15",{"_index":431,"title":{},"body":{"classes/Category.html":{}}}],["src/mongo/schemas/category.schema.ts:18",{"_index":429,"title":{},"body":{"classes/Category.html":{}}}],["src/mongo/schemas/category.schema.ts:21",{"_index":430,"title":{},"body":{"classes/Category.html":{}}}],["src/mongo/schemas/product.schema.ts",{"_index":662,"title":{},"body":{"classes/Product.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mongo/schemas/product.schema.ts:11",{"_index":667,"title":{},"body":{"classes/Product.html":{}}}],["src/mongo/schemas/product.schema.ts:14",{"_index":665,"title":{},"body":{"classes/Product.html":{}}}],["src/mongo/schemas/product.schema.ts:17",{"_index":663,"title":{},"body":{"classes/Product.html":{}}}],["src/mongo/schemas/product.schema.ts:20",{"_index":666,"title":{},"body":{"classes/Product.html":{}}}],["src/mongo/schemas/product.schema.ts:23",{"_index":664,"title":{},"body":{"classes/Product.html":{}}}],["src/mongo/schemas/user.schema.ts",{"_index":684,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/mongo/schemas/user.schema.ts:12",{"_index":686,"title":{},"body":{"classes/User.html":{}}}],["src/mongo/schemas/user.schema.ts:15",{"_index":688,"title":{},"body":{"classes/User.html":{}}}],["src/mongo/schemas/user.schema.ts:9",{"_index":687,"title":{},"body":{"classes/User.html":{}}}],["src/mysql/auth/auth.controller.ts",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/mysql/auth/auth.controller.ts:23",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/mysql/auth/auth.controller.ts:39",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/mysql/auth/auth.module.ts",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/mysql/auth/auth.service.ts",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/mysql/auth/auth.service.ts:12",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mysql/auth/auth.service.ts:18",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mysql/auth/auth.service.ts:42",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mysql/auth/auth.service.ts:62",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/mysql/auth/dto/auth.dto.ts",{"_index":128,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"coverage.html":{}}}],["src/mysql/auth/dto/auth.dto.ts:10",{"_index":137,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/mysql/auth/dto/auth.dto.ts:18",{"_index":140,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/mysql/auth/dto/auth.dto.ts:26",{"_index":225,"title":{},"body":{"classes/AuthToken.html":{}}}],["src/mysql/auth/strategy/jwt.strategy.ts",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/mysql/auth/strategy/jwt.strategy.ts:20",{"_index":612,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/mysql/auth/strategy/jwt.strategy.ts:8",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts",{"_index":364,"title":{},"body":{"controllers/BookmarkController.html":{},"coverage.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts:28",{"_index":385,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts:33",{"_index":383,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts:41",{"_index":373,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts:49",{"_index":381,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["src/mysql/bookmark/bookmark.controller.ts:59",{"_index":377,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["src/mysql/bookmark/bookmark.module.ts",{"_index":406,"title":{},"body":{"modules/BookmarkModule.html":{}}}],["src/mysql/bookmark/bookmark.service.ts",{"_index":408,"title":{},"body":{"injectables/BookmarkService.html":{},"coverage.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:17",{"_index":413,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:26",{"_index":410,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:37",{"_index":412,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:6",{"_index":409,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:63",{"_index":411,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/bookmark.service.ts:9",{"_index":414,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["src/mysql/bookmark/dto/create",{"_index":517,"title":{},"body":{"classes/CreateBookmarkDto.html":{},"coverage.html":{}}}],["src/mysql/bookmark/dto/edit",{"_index":536,"title":{},"body":{"classes/EditBookmarkDto.html":{},"coverage.html":{}}}],["src/mysql/file",{"_index":554,"title":{},"body":{"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{}}}],["src/mysql/user/dto/edit",{"_index":541,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["src/mysql/user/user.controller.ts",{"_index":695,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/mysql/user/user.controller.ts:62",{"_index":715,"title":{},"body":{"controllers/UserController.html":{}}}],["src/mysql/user/user.controller.ts:71",{"_index":704,"title":{},"body":{"controllers/UserController.html":{}}}],["src/mysql/user/user.module.ts",{"_index":741,"title":{},"body":{"modules/UserModule.html":{}}}],["src/mysql/user/user.service.ts",{"_index":743,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/mysql/user/user.service.ts:6",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["src/mysql/user/user.service.ts:8",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["src/pipes/parse",{"_index":623,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{},"coverage.html":{}}}],["src/prisma/prisma.module.ts",{"_index":644,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service.ts",{"_index":647,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:17",{"_index":651,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":650,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/uploads/files",{"_index":578,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["start",{"_index":817,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":820,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":822,"title":{},"body":{"index.html":{}}}],["started",{"_index":797,"title":{"index.html":{}},"body":{}}],["starter",{"_index":809,"title":{},"body":{"index.html":{}}}],["statements",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":287,"title":{},"body":{"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["status",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDto.html":{},"classes/EditCategoryDto.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["status})@isenum(status)@isnotempty",{"_index":531,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["status})@post",{"_index":450,"title":{},"body":{"controllers/CategoryController.html":{}}}],["stay",{"_index":845,"title":{},"body":{"index.html":{}}}],["storage",{"_index":576,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["strategy",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":132,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["super",{"_index":605,"title":{},"body":{"classes/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["support",{"_index":836,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":855,"title":{},"body":{"modules.html":{}}}],["table",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":825,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":828,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":827,"title":{},"body":{"index.html":{}}}],["tests",{"_index":824,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":834,"title":{},"body":{"index.html":{}}}],["this.$transaction([this.user.deletemany",{"_index":659,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.signin(dto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.bookmark.deletemany",{"_index":660,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.bookmarkservice.createbookmark(userid",{"_index":399,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["this.bookmarkservice.deletebookmarkbyid(userid",{"_index":403,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["this.bookmarkservice.editbookmarkbyid(userid",{"_index":401,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["this.bookmarkservice.getbookmarkbyid(userid",{"_index":398,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["this.bookmarkservice.getbookmarks(userid",{"_index":396,"title":{},"body":{"controllers/BookmarkController.html":{}}}],["this.bookmodel",{"_index":343,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookmodel.create(data",{"_index":351,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookmodel.findbyid(id).populate(\"category",{"_index":357,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookmodel.findbyidanddelete(id",{"_index":362,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookmodel.findbyidandupdate(id",{"_index":360,"title":{},"body":{"injectables/BookService.html":{}}}],["this.bookservice.create(book",{"_index":297,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.deletebyid(id",{"_index":304,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.findall(query",{"_index":295,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.findbyid(id",{"_index":300,"title":{},"body":{"controllers/BookController.html":{}}}],["this.bookservice.updatebyid(id",{"_index":302,"title":{},"body":{"controllers/BookController.html":{}}}],["this.categorymodel",{"_index":498,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.create",{"_index":501,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyid(categoryid",{"_index":500,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyidanddelete(categoryid",{"_index":504,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyidandupdate(categoryid",{"_index":503,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.createcategory(dto",{"_index":474,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.deletecategorybyid(categoryid",{"_index":477,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.getcategory(query",{"_index":471,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.getcategorybyid(categoryid",{"_index":472,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.updatecategorybyid(categoryid",{"_index":475,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.config.get(\"jwt_secret",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.signasync(payload",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.bookmark.create",{"_index":418,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.bookmark.delete",{"_index":427,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.bookmark.findfirst",{"_index":416,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.bookmark.findmany",{"_index":415,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.bookmark.findunique",{"_index":419,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.bookmark.update",{"_index":426,"title":{},"body":{"injectables/BookmarkService.html":{}}}],["this.prisma.user.create",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.prisma.user.update",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["this.singntoken(user.id",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.edituser(userid",{"_index":738,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookService.html":{},"injectables/BookmarkService.html":{},"injectables/CategoryService.html":{},"controllers/FileUploadController.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["timestamps",{"_index":245,"title":{},"body":{"classes/Book.html":{},"classes/Category.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["title",{"_index":231,"title":{},"body":{"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{}}}],["token",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["token.'})@apiresponse({status",{"_index":711,"title":{},"body":{"controllers/UserController.html":{}}}],["touch",{"_index":846,"title":{},"body":{"index.html":{}}}],["transform",{"_index":628,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["transform(value",{"_index":629,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["transformedobjectid",{"_index":636,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{}}}],["transformer",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"injectables/BookService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"classes/Product.html":{},"classes/User.html":{}}}],["true})@isemail()@isnotempty",{"_index":136,"title":{},"body":{"classes/AuthDto.html":{}}}],["true})@isemail()@isoptional",{"_index":545,"title":{},"body":{"classes/EditUserDto.html":{}}}],["true})@isstring",{"_index":224,"title":{},"body":{"classes/AuthToken.html":{}}}],["true})@isstring()@isnotempty",{"_index":139,"title":{},"body":{"classes/AuthDto.html":{}}}],["try",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseObjectIdPipePipe.html":{}}}],["twitter",{"_index":851,"title":{},"body":{"index.html":{}}}],["type",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/AuthToken.html":{},"classes/Book.html":{},"controllers/BookController.html":{},"injectables/BookService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"controllers/FileUploadController.html":{},"injectables/JwtStrategy.html":{},"injectables/ParseObjectIdPipePipe.html":{},"injectables/PrismaService.html":{},"classes/Product.html":{},"classes/UpdateBookDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typescript",{"_index":808,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":235,"title":{},"body":{"classes/Book.html":{},"classes/Product.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":689,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":823,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":864,"title":{},"body":{"properties.html":{}}}],["up",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatebook",{"_index":256,"title":{},"body":{"controllers/BookController.html":{}}}],["updatebook(id",{"_index":272,"title":{},"body":{"controllers/BookController.html":{}}}],["updatebookdto",{"_index":273,"title":{"classes/UpdateBookDto.html":{}},"body":{"controllers/BookController.html":{},"classes/UpdateBookDto.html":{},"coverage.html":{}}}],["updatebyid",{"_index":314,"title":{},"body":{"injectables/BookService.html":{}}}],["updatebyid(id",{"_index":327,"title":{},"body":{"injectables/BookService.html":{}}}],["updatecategorybyid",{"_index":446,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["updatecategorybyid(categoryid",{"_index":460,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["upload",{"_index":556,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["upload.controller",{"_index":597,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.controller.ts",{"_index":555,"title":{},"body":{"controllers/FileUploadController.html":{},"coverage.html":{}}}],["upload.controller.ts:44",{"_index":561,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["upload.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["upload.module.ts",{"_index":596,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.service",{"_index":598,"title":{},"body":{"modules/FileUploadModule.html":{}}}],["upload.service.ts",{"_index":599,"title":{},"body":{"injectables/FileUploadService.html":{},"coverage.html":{}}}],["upload/file",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{},"modules/FileUploadModule.html":{},"injectables/FileUploadService.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":563,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile",{"_index":557,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(@uploadedfile",{"_index":589,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploadfile(file",{"_index":558,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["uploads",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/FileUploadController.html":{}}}],["url",{"_index":655,"title":{},"body":{"injectables/PrismaService.html":{}}}],["useguards",{"_index":279,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtguard",{"_index":296,"title":{},"body":{"controllers/BookController.html":{},"controllers/BookmarkController.html":{},"controllers/CategoryController.html":{},"controllers/FileUploadController.html":{},"controllers/UserController.html":{}}}],["useinterceptors",{"_index":564,"title":{},"body":{"controllers/FileUploadController.html":{}}}],["user",{"_index":76,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BookmarkService.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":742,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":720,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":542,"title":{},"body":{"classes/EditUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":546,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:19",{"_index":549,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.dto.ts:27",{"_index":551,"title":{},"body":{"classes/EditUserDto.html":{}}}],["user.email",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hash",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["user.service",{"_index":722,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":694,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"controllers/BookmarkController.html":{},"injectables/BookmarkService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":19,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["users",{"_index":696,"title":{},"body":{"controllers/UserController.html":{}}}],["userschema",{"_index":692,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":721,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":144,"title":{},"body":{"classes/AuthDto.html":{},"classes/AuthToken.html":{},"classes/CreateBookDto.html":{},"classes/CreateBookmarkDto.html":{},"classes/CreateCategoryDto.html":{},"classes/EditBookmarkDto.html":{},"classes/EditCategoryDto.html":{},"classes/EditUserDto.html":{},"classes/UpdateBookDto.html":{},"dependencies.html":{}}}],["value",{"_index":631,"title":{},"body":{"injectables/ParseObjectIdPipePipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":865,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":862,"title":{},"body":{"properties.html":{}}}],["void",{"_index":562,"title":{},"body":{"controllers/FileUploadController.html":{},"injectables/PrismaService.html":{}}}],["watch",{"_index":818,"title":{},"body":{"index.html":{}}}],["website",{"_index":849,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":812,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":839,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BookModule.html":{},"modules/BookmarkModule.html":{},"modules/CategoryModule.html":{},"modules/FileUploadModule.html":{},"modules/PrismaModule.html":{},"modules/ProductModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nBookmarkModule\n\nBookmarkModule\n\nAppModule -->\n\nBookmarkModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BookModule\n                        \n                        \n                            BookmarkModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            FileUploadModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            ProductModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\n\n/***:- DataBase Connection -:***/\nimport { PrismaModule } from \"./prisma/prisma.module\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\n\nimport { AuthModule } from \"./mysql/auth/auth.module\";\nimport { UserModule } from \"./mysql/user/user.module\";\nimport { BookmarkModule } from \"./mysql/bookmark/bookmark.module\";\n\nimport { ProductModule } from \"./mongo/product/product.module\";\nimport { CategoryModule } from \"./mongo/category/category.module\";\nimport { BookModule } from \"./mongo/book/book.module\";\nimport { FileUploadModule } from \"./mysql/file-upload/file-upload.module\";\nimport { MulterModule } from \"@nestjs/platform-express\";\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    PrismaModule,\n    MongooseModule.forRoot(process.env.MONGO_DATABASE_URL),\n    AuthModule,\n    UserModule,\n    BookmarkModule,\n    ProductModule,\n    CategoryModule,\n    BookModule,\n    FileUploadModule,\n    MulterModule.register({\n      dest: \"./uploads\",\n    }),\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                signin\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'sign in', description: 'user login'})@ApiBody({type: AuthDto, description: 'Json structure for user login'})@ApiResponse({status: 200, description: 'The user login successfully.', type: AuthToken})@HttpCode(200)@Post('signin')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/auth/auth.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'sing up', description: 'create user account'})@ApiBody({type: AuthDto, description: 'Json structure for user login'})@ApiResponse({status: 200, description: 'The user created successfully.', type: AuthDto})@HttpCode(200)@Post('signup')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/auth/auth.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, HttpCode } from \"@nestjs/common\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthDto, AuthToken } from \"./dto/auth.dto\";\n\nimport { ApiOperation, ApiBody, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n@ApiTags(\"Auth\")\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: \"sing up\", description: \"create user account\" })\n  @ApiBody({\n    type: AuthDto,\n    description: \"Json structure for user login\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"The user created successfully.\",\n    type: AuthDto,\n  })\n  @HttpCode(200)\n  @Post(\"signup\")\n  signup(@Body() dto: AuthDto) {\n    return this.authService.signup(dto);\n  }\n\n  @ApiOperation({ summary: \"sign in\", description: \"user login\" })\n  @ApiBody({\n    type: AuthDto,\n    description: \"Json structure for user login\",\n  })\n  @ApiResponse({\n    status: 200,\n    description: \"The user login successfully.\",\n    type: AuthToken,\n  })\n  @HttpCode(200)\n  @Post(\"signin\")\n  signin(@Body() dto: AuthDto) {\n    return this.authService.signin(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'kailash@gmail.com', required: true})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/auth/dto/auth.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456', required: true})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/auth/dto/auth.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nexport class AuthDto {\n  @ApiProperty({\n    example: \"kailash@gmail.com\",\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    example: \"123456\",\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthToken {\n  @ApiProperty({\n    example: \"accessToken\",\n    required: true,\n  })\n  @IsString()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mysql/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { JwtStrategy } from \"./strategy\";\n\n@Module({\n  imports: [JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                singnToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mysql/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(dto: AuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/auth/auth.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: AuthDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/auth/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            AuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        singnToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    singnToken(userId: number, email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/auth/auth.service.ts:62\n                        \n                    \n\n\n            \n                \n                        :- generate the token -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from \"@nestjs/common\";\n\nimport { AuthDto } from \"./dto/auth.dto\";\n\nimport * as argon from \"argon2\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime/library\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable({})\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwt: JwtService,\n    private config: ConfigService,\n  ) {}\n  async signup(dto: AuthDto) {\n    console.log(\"dto\", dto);\n    const hash = await argon.hash(dto.password);\n    console.log(hash);\n    try {\n      const user = await this.prisma.user.create({\n        data: {\n          email: dto.email,\n          hash,\n        },\n      });\n\n      delete user.hash;\n      return user;\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === \"P2002\") {\n          throw new ForbiddenException(\"Credentials taken\");\n        }\n      }\n      throw error;\n    }\n  }\n\n  async signin(dto: AuthDto) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) {\n      throw new ForbiddenException(\"Credentials incorrect\");\n    }\n    const passMatch = await argon.verify(user.hash, dto.password);\n    if (!passMatch) {\n      throw new ForbiddenException(\"Credentials incorrect!\");\n    }\n    delete user.hash;\n    console.log(passMatch);\n\n    return this.singnToken(user.id, user.email);\n  }\n\n  /***:- generate the token -:***/\n  async singnToken(\n    userId: number,\n    email: string,\n  ): Promise {\n    const payload = {\n      sub: userId,\n      email,\n    };\n    const secret = this.config.get(\"JWT_SECRET\");\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: \"15m\",\n      secret: secret,\n    });\n    const data = {\n      accessToken: token,\n    };\n\n    return data;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthToken.html":{"url":"classes/AuthToken.html","title":"class - AuthToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'accessToken', required: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/auth/dto/auth.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nexport class AuthDto {\n  @ApiProperty({\n    example: \"kailash@gmail.com\",\n    required: true,\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    example: \"123456\",\n    required: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\nexport class AuthToken {\n  @ApiProperty({\n    example: \"accessToken\",\n    required: true,\n  })\n  @IsString()\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Book.html":{"url":"classes/Book.html","title":"class - Book","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Book\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/schemas/book.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/book.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Category'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/book.schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/book.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/book.schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/book.schema.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport mongoose from \"mongoose\";\nimport { Category } from \"./index.schema\";\n\n@Schema({\n  timestamps: true,\n})\nexport class Book {\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  author: string;\n\n  @Prop()\n  price: string;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: \"Category\" })\n  category: Category;\n}\n\nexport const BookSchema = SchemaFactory.createForClass(Book);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookController.html":{"url":"controllers/BookController.html","title":"controller - BookController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/book/book.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                books\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createBook\n                            \n                            \n                                    \n                                    Async\n                                deleteBook\n                            \n                            \n                                    \n                                    Async\n                                getAllBooks\n                            \n                            \n                                    \n                                    Async\n                                getBook\n                            \n                            \n                                    \n                                    Async\n                                updateBook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBook(book: CreateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/book/book.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                book\n                                            \n                                                            CreateBookDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBook(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/book/book.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAllBooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllBooks(query: ExpressQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/book/book.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        ExpressQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBook(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/book/book.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateBook\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateBook(id: string, book: UpdateBookDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/book/book.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                book\n                                            \n                                                            UpdateBookDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\nimport { CreateBookDto } from \"./dto/create-book.dto\";\nimport { UpdateBookDto } from \"./dto/update-book.dto\";\n\nimport { Book } from \"../schemas/index.schema\";\n\nimport { Query as ExpressQuery } from \"express-serve-static-core\";\nimport { JwtGuard } from \"../../guard/index\";\nimport { ApiBearerAuth, ApiTags } from \"@nestjs/swagger\";\n\n@ApiBearerAuth()\n@ApiTags(\"Books\")\n@Controller(\"books\")\nexport class BookController {\n  constructor(private bookService: BookService) {}\n\n  @Get()\n  async getAllBooks(@Query() query: ExpressQuery): Promise {\n    return this.bookService.findAll(query);\n  }\n\n  @Post()\n  @UseGuards(JwtGuard)\n  async createBook(\n    @Body()\n    book: CreateBookDto,\n  ): Promise {\n    return this.bookService.create(book);\n  }\n\n  @Get(\":id\")\n  async getBook(\n    @Param(\"id\")\n    id: string,\n  ): Promise {\n    return this.bookService.findById(id);\n  }\n\n  @Put(\":id\")\n  async updateBook(\n    @Param(\"id\")\n    id: string,\n    @Body()\n    book: UpdateBookDto,\n  ): Promise {\n    return this.bookService.updateById(id, book);\n  }\n\n  @Delete(\":id\")\n  async deleteBook(\n    @Param(\"id\")\n    id: string,\n  ): Promise {\n    return this.bookService.deleteById(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookModule.html":{"url":"modules/BookModule.html","title":"module - BookModule","body":"\n                   \n\n\n\n\n    Modules\n    BookModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BookModule\n\n\n\ncluster_BookModule_providers\n\n\n\n\nBookService\n\nBookService\n\n\n\nBookModule\n\nBookModule\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mongo/book/book.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { BookController } from \"./book.controller\";\nimport { BookService } from \"./book.service\";\nimport { BookSchema } from \"../schemas/index.schema\";\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: \"Book\", schema: BookSchema }])],\n  controllers: [BookController],\n  providers: [BookService],\n})\nexport class BookModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookService.html":{"url":"injectables/BookService.html","title":"injectable - BookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/book/book.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteById\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                updateById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(bookModel: mongoose.Model)\n                    \n                \n                        \n                            \n                                Defined in src/mongo/book/book.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        bookModel\n                                                  \n                                                        \n                                                                        mongoose.Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(book: Book)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/book/book.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                book\n                                            \n                                                            Book\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/book/book.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: Query)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/book/book.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        Query\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/book/book.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateById(id: string, book: Book)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/book/book.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                book\n                                            \n                                                            Book\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from \"@nestjs/common\";\n\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\n\nimport { Book } from \"../schemas/index.schema\";\n\nimport { Query } from \"express-serve-static-core\";\n\nimport { Category } from \"../schemas/index.schema\";\n\n@Injectable()\nexport class BookService {\n  constructor(\n    @InjectModel(Book.name)\n    private bookModel: mongoose.Model,\n  ) {}\n\n  async findAll(query: Query): Promise {\n    const resPerPage = 2;\n    const currentPage = Number(query.page) || 1;\n    const skip = resPerPage * (currentPage - 1);\n\n    const keyword = query.keyword\n      ? {\n          title: {\n            $regex: query.keyword,\n            $options: \"i\",\n          },\n        }\n      : {};\n\n    const books = await this.bookModel\n      .find({ ...keyword })\n      .populate(\"category\")\n      .limit(resPerPage)\n      .skip(skip);\n    return books;\n  }\n\n  async create(book: Book): Promise {\n    console.log({ book: book });\n\n    const data = Object.assign(book);\n\n    const res = await this.bookModel.create(data);\n    return res;\n  }\n\n  async findById(id: string): Promise {\n    const isValidId = mongoose.isValidObjectId(id);\n\n    if (!isValidId) {\n      throw new BadRequestException(\"Please enter correct id.\");\n    }\n\n    const book = await this.bookModel.findById(id).populate(\"category\");\n\n    if (!book) {\n      throw new NotFoundException(\"Book not found.\");\n    }\n\n    return book;\n  }\n\n  async updateById(id: string, book: Book): Promise {\n    return await this.bookModel.findByIdAndUpdate(id, book, {\n      new: true,\n      runValidators: true,\n    });\n  }\n\n  async deleteById(id: string): Promise {\n    return await this.bookModel.findByIdAndDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BookmarkController.html":{"url":"controllers/BookmarkController.html","title":"controller - BookmarkController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BookmarkController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/bookmark/bookmark.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                bookmarks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createBookmark\n                            \n                            \n                                    \n                                    \n                                deleteBookmarkById\n                            \n                            \n                                    \n                                editBookmarkById\n                            \n                            \n                                    \n                                getBookmarkById\n                            \n                            \n                                    \n                                getBookmarks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createBookmark\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBookmark(userId: number, dto: CreateBookmarkDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateBookmarkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteBookmarkById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBookmarkById(userId: number, bookmarkId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editBookmarkById\n                        \n                    \n                \n            \n            \n                \n                        \n                    editBookmarkById(userId: number, bookmarkId: number, dto: EditBookmarkDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditBookmarkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBookmarkById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBookmarkById(userId: number, bookmarkId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getBookmarks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBookmarks(userId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { GetUser } from \"../../decorator/auth.decorator\";\nimport { JwtGuard } from \"../../guard/index\";\nimport { BookmarkService } from \"./bookmark.service\";\nimport { CreateBookmarkDto, EditBookmarkDto } from \"./dto\";\nimport { ApiBearerAuth, ApiTags } from \"@nestjs/swagger\";\n\n@ApiBearerAuth()\n@ApiTags(\"Bookmarks\")\n@UseGuards(JwtGuard)\n@Controller(\"bookmarks\")\nexport class BookmarkController {\n  constructor(private bookmarkService: BookmarkService) {}\n\n  @Get()\n  getBookmarks(@GetUser(\"id\") userId: number) {\n    return this.bookmarkService.getBookmarks(userId);\n  }\n\n  @Get(\":id\")\n  getBookmarkById(\n    @GetUser(\"id\") userId: number,\n    @Param(\"id\", ParseIntPipe) bookmarkId: number,\n  ) {\n    return this.bookmarkService.getBookmarkById(userId, bookmarkId);\n  }\n\n  @Post()\n  createBookmark(\n    @GetUser(\"id\") userId: number,\n    @Body() dto: CreateBookmarkDto,\n  ) {\n    return this.bookmarkService.createBookmark(userId, dto);\n  }\n\n  @Patch(\":id\")\n  editBookmarkById(\n    @GetUser(\"id\") userId: number,\n    @Param(\"id\", ParseIntPipe) bookmarkId: number,\n    @Body() dto: EditBookmarkDto,\n  ) {\n    return this.bookmarkService.editBookmarkById(userId, bookmarkId, dto);\n  }\n\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(\":id\")\n  deleteBookmarkById(\n    @GetUser(\"id\") userId: number,\n    @Param(\"id\", ParseIntPipe) bookmarkId: number,\n  ) {\n    return this.bookmarkService.deleteBookmarkById(userId, bookmarkId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BookmarkModule.html":{"url":"modules/BookmarkModule.html","title":"module - BookmarkModule","body":"\n                   \n\n\n\n\n    Modules\n    BookmarkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BookmarkModule\n\n\n\ncluster_BookmarkModule_providers\n\n\n\n\nBookmarkService\n\nBookmarkService\n\n\n\nBookmarkModule\n\nBookmarkModule\n\nBookmarkModule -->\n\nBookmarkService->BookmarkModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mysql/bookmark/bookmark.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BookmarkService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BookmarkController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BookmarkController } from './bookmark.controller';\nimport { BookmarkService } from './bookmark.service';\n\n@Module({\n  controllers: [BookmarkController],\n  providers: [BookmarkService]\n})\nexport class BookmarkModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BookmarkService.html":{"url":"injectables/BookmarkService.html","title":"injectable - BookmarkService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BookmarkService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/bookmark/bookmark.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createBookmark\n                            \n                            \n                                    Async\n                                deleteBookmarkById\n                            \n                            \n                                    Async\n                                editBookmarkById\n                            \n                            \n                                getBookmarkById\n                            \n                            \n                                getBookmarks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/mysql/bookmark/bookmark.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBookmark\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBookmark(userId: number, dto: CreateBookmarkDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateBookmarkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteBookmarkById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteBookmarkById(userId: number, bookmarkId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editBookmarkById\n                        \n                    \n                \n            \n            \n                \n                        \n                    editBookmarkById(userId: number, bookmarkId: number, dto: EditBookmarkDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditBookmarkDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBookmarkById\n                        \n                    \n                \n            \n            \n                \ngetBookmarkById(userId: number, bookmarkId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                bookmarkId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBookmarks\n                        \n                    \n                \n            \n            \n                \ngetBookmarks(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/bookmark/bookmark.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { CreateBookmarkDto, EditBookmarkDto } from \"./dto\";\n\n@Injectable()\nexport class BookmarkService {\n  constructor(private prisma: PrismaService) {}\n\n  getBookmarks(userId: number) {\n    return this.prisma.bookmark.findMany({\n      where: {\n        userId,\n      },\n    });\n  }\n\n  getBookmarkById(userId: number, bookmarkId: number) {\n    return this.prisma.bookmark.findFirst({\n      where: {\n        id: bookmarkId,\n        userId,\n      },\n    });\n  }\n\n  async createBookmark(userId: number, dto: CreateBookmarkDto) {\n    const bookmark = await this.prisma.bookmark.create({\n      data: {\n        userId,\n        ...dto,\n      },\n    });\n\n    return bookmark;\n  }\n\n  async editBookmarkById(\n    userId: number,\n    bookmarkId: number,\n    dto: EditBookmarkDto,\n  ) {\n    // get the bookmark by id\n    const bookmark = await this.prisma.bookmark.findUnique({\n      where: {\n        id: bookmarkId,\n      },\n    });\n\n    // check if user owns the bookmark\n    if (!bookmark || bookmark.userId !== userId)\n      throw new ForbiddenException(\"Access to resources denied\");\n\n    return this.prisma.bookmark.update({\n      where: {\n        id: bookmarkId,\n      },\n      data: {\n        ...dto,\n      },\n    });\n  }\n\n  async deleteBookmarkById(userId: number, bookmarkId: number) {\n    const bookmark = await this.prisma.bookmark.findUnique({\n      where: {\n        id: bookmarkId,\n      },\n    });\n\n    // check if user owns the bookmark\n    if (!bookmark || bookmark.userId !== userId)\n      throw new ForbiddenException(\"Access to resources denied\");\n\n    await this.prisma.bookmark.delete({\n      where: {\n        id: bookmarkId,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/schemas/category.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/category.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/category.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/category.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\nexport enum Status {\n  active = \"Active\",\n  inactive = \"Inactive\",\n  deleted = \"Delete\",\n}\n\n@Schema({\n  timestamps: true,\n})\nexport class Category extends Document {\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  status: Status;\n}\n\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createCategory\n                            \n                            \n                                    \n                                    \n                                deleteCategoryById\n                            \n                            \n                                    \n                                getCategory\n                            \n                            \n                                    \n                                getCategoryById\n                            \n                            \n                                    \n                                updateCategoryById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(dto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiQuery({name: 'status', enum: Status})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/category/category.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategoryById(categoryId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/category/category.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategory(query: ExpressQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/category/category.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        ExpressQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategoryById(categoryId: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/category/category.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                        ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategoryById(categoryId: number, dto: EditCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/mongo/category/category.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Query,\n  ParseIntPipe,\n  Patch,\n  Post,\n  UseGuards,\n} from \"@nestjs/common\";\n\nimport { JwtGuard } from \"../../guard/index\";\nimport { CategoryService } from \"./category.service\";\nimport { CreateCategoryDto, EditCategoryDto, Status } from \"./dto\";\n\nimport { Query as ExpressQuery } from \"express-serve-static-core\";\nimport { Category } from \"../schemas/index.schema\";\nimport { ParseObjectIdPipePipe } from \"../../pipes/index.pipes\";\n\nimport { ObjectId } from \"mongoose\";\nimport { ApiBearerAuth, ApiQuery, ApiTags } from \"@nestjs/swagger\";\n\n@ApiBearerAuth()\n@ApiTags(\"Category\")\n@UseGuards(JwtGuard)\n@Controller(\"category\")\nexport class CategoryController {\n  constructor(private CategoryService: CategoryService) {}\n\n  @Get()\n  getCategory(@Query() query: ExpressQuery): Promise {\n    return this.CategoryService.getCategory(query);\n  }\n\n  @Get(\":id\")\n  getCategoryById(\n    @Param(\"id\", ParseObjectIdPipePipe) categoryId: ObjectId,\n  ): Promise {\n    return this.CategoryService.getCategoryById(categoryId);\n  }\n\n  @ApiQuery({ name: \"status\", enum: Status })\n  @Post()\n  createCategory(@Body() dto: CreateCategoryDto) {\n    return this.CategoryService.createCategory(dto);\n  }\n\n  @Patch(\":id\")\n  updateCategoryById(\n    @Param(\"id\", ParseIntPipe) categoryId: number,\n    @Body() dto: EditCategoryDto,\n  ) {\n    return this.CategoryService.updateCategoryById(categoryId, dto);\n  }\n\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(\":id\")\n  deleteCategoryById(@Param(\"id\", ParseIntPipe) categoryId: number) {\n    return this.CategoryService.deleteCategoryById(categoryId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mongo/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { MongooseModule } from \"@nestjs/mongoose\";\nimport { CategoryController } from \"./category.controller\";\nimport { CategoryService } from \"./category.service\";\nimport { CategorySchema } from \"../schemas/index.schema\";\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: \"Category\", schema: CategorySchema }]),\n  ],\n  controllers: [CategoryController],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategoryById\n                            \n                            \n                                    Async\n                                getCategory\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategoryById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryModel: mongoose.Model)\n                    \n                \n                        \n                            \n                                Defined in src/mongo/category/category.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryModel\n                                                  \n                                                        \n                                                                        mongoose.Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(dto: CreateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/category/category.service.ts:63\n                        \n                    \n\n\n            \n                \n                        :- create new record -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCategoryById(categoryId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/category/category.service.ts:95\n                        \n                    \n\n\n            \n                \n                        :- delete by id -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategory(query: Query)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/category/category.service.ts:25\n                        \n                    \n\n\n            \n                \n                        :- list all data with search and pagination -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        Query\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCategoryById(categoryId: mongoose.ObjectId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/category/category.service.ts:46\n                        \n                    \n\n\n            \n                \n                        :- find by id -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                        mongoose.ObjectId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCategoryById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategoryById(categoryId: number, dto: EditCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mongo/category/category.service.ts:72\n                        \n                    \n\n\n            \n                \n                        :- edit by id -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n} from \"@nestjs/common\";\n\nimport { InjectModel } from \"@nestjs/mongoose\";\nimport * as mongoose from \"mongoose\";\n\nimport { Query } from \"express-serve-static-core\";\n\nimport { Category } from \"../schemas/index.schema\";\n\nimport { CreateCategoryDto, EditCategoryDto } from \"./dto\";\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectModel(Category.name)\n    private categoryModel: mongoose.Model,\n  ) {}\n\n  /***:- list all data with search and pagination -:***/\n  async getCategory(query: Query): Promise {\n    const resPerPage = 2;\n    const currentPage = Number(query.page) || 1;\n    const skip = resPerPage * (currentPage - 1);\n\n    const keyword = query.keyword\n      ? {\n          title: {\n            $regex: query.keyword,\n            $options: \"i\",\n          },\n        }\n      : {};\n\n    return await this.categoryModel\n      .find({ ...keyword })\n      .limit(resPerPage)\n      .skip(skip);\n  }\n\n  /***:- find by id -:***/\n  async getCategoryById(categoryId: mongoose.ObjectId): Promise {\n    const isValidId = mongoose.isValidObjectId(categoryId);\n\n    if (!isValidId) {\n      throw new BadRequestException(\"Please enter correct id.\");\n    }\n\n    const category = await this.categoryModel.findById(categoryId);\n\n    if (!category) {\n      throw new NotFoundException(\"Book not found.\");\n    }\n\n    return category;\n  }\n\n  /***:- create new record -:***/\n  async createCategory(dto: CreateCategoryDto): Promise {\n    const category = await this.categoryModel.create({\n      ...dto,\n    });\n\n    return category;\n  }\n\n  /***:- edit by id -:***/\n  async updateCategoryById(\n    categoryId: number,\n    dto: EditCategoryDto,\n  ): Promise {\n    const isValidId = mongoose.isValidObjectId(categoryId);\n\n    if (!isValidId) {\n      throw new BadRequestException(\"Please enter correct id.\");\n    }\n\n    const category = await this.categoryModel.findById(categoryId);\n\n    if (!category) {\n      throw new NotFoundException(\"Category not found.\");\n    }\n\n    return await this.categoryModel.findByIdAndUpdate(categoryId, dto, {\n      new: true,\n      runValidators: true,\n    });\n  }\n\n  /***:- delete by id -:***/\n  async deleteCategoryById(categoryId: number): Promise {\n    return await this.categoryModel.findByIdAndDelete(categoryId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookDto.html":{"url":"classes/CreateBookDto.html","title":"class - CreateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/book/dto/create-book.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                author\n                            \n                            \n                                    \n                                    Readonly\n                                category\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                price\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/create-book.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/create-book.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/create-book.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/create-book.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/create-book.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmpty,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from \"class-validator\";\n\nimport { Category } from \"../../schemas/index.schema\";\n\nexport class CreateBookDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly title: string;\n\n  @IsNotEmpty()\n  @IsString()\n  readonly description: string;\n\n  @IsNotEmpty()\n  @IsString()\n  readonly author: string;\n\n  @IsNotEmpty()\n  @IsString()\n  readonly price: string;\n\n  @IsNotEmpty()\n  readonly category: Category;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBookmarkDto.html":{"url":"classes/CreateBookmarkDto.html","title":"class - CreateBookmarkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBookmarkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/bookmark/dto/create-bookmark.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                link\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/create-bookmark.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/create-bookmark.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/create-bookmark.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class CreateBookmarkDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  link: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/create-category.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Status})@IsEnum(Status)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/create-category.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/create-category.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEnum, IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport enum Status {\n  active = \"Active\",\n  inactive = \"Inactive\",\n  deleted = \"Delete\",\n}\n\nexport class CreateCategoryDto {\n  @ApiProperty()\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @ApiProperty({ enum: Status })\n  @IsEnum(Status)\n  @IsNotEmpty()\n  status: Status;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditBookmarkDto.html":{"url":"classes/EditBookmarkDto.html","title":"class - EditBookmarkDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditBookmarkDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/bookmark/dto/edit-bookmark.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                link\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/edit-bookmark.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        link\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/edit-bookmark.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/bookmark/dto/edit-bookmark.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class EditBookmarkDto {\n  @IsString()\n  @IsOptional()\n  title?: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsString()\n  @IsOptional()\n  link?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditCategoryDto.html":{"url":"classes/EditCategoryDto.html","title":"class - EditCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/category/dto/edit-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/edit-category.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/edit-category.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/category/dto/edit-category.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class EditCategoryDto {\n  @IsString()\n  @IsOptional()\n  title?: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsString()\n  @IsOptional()\n  status?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EditUserDto.html":{"url":"classes/EditUserDto.html","title":"class - EditUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EditUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/user/dto/edit-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'kailash@gmail.com', required: true})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/user/dto/edit-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'kailash', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/user/dto/edit-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Shaw', required: false})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mysql/user/dto/edit-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsOptional, IsString } from \"class-validator\";\nimport { ApiProperty } from \"@nestjs/swagger\";\n\nexport class EditUserDto {\n  @ApiProperty({\n    example: \"kailash@gmail.com\",\n    required: true,\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiProperty({\n    example: \"kailash\",\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiProperty({\n    example: \"Shaw\",\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileUploadController.html":{"url":"controllers/FileUploadController.html","title":"controller - FileUploadController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileUploadController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/file-upload/file-upload.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                file-upload\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'File-Upload', description: 'file upload by multer.'})@Post('upload')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/file-upload/file-upload.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  BadRequestException,\n  Controller,\n  Post,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiConsumes, ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { diskStorage } from \"multer\";\nimport { extname } from \"path\";\nimport { JwtGuard } from \"../../guard/index\";\n@ApiTags(\"File Uploads\")\n@ApiConsumes(\"multipart/form-data\")\n@UseGuards(JwtGuard)\n@Controller(\"file-upload\")\nexport class FileUploadController {\n  @ApiOperation({\n    summary: \"File-Upload\",\n    description: \"file upload by multer.\",\n  })\n  @Post(\"upload\")\n  @UseInterceptors(\n    FileInterceptor(\"file\", {\n      storage: diskStorage({\n        destination: \"./src/uploads/files\",\n        filename: (req, file, callback) => {\n          console.log(\"file\", file);\n          const name = Date.now();\n          const ext = extname(file.originalname);\n          const filename = `${name}${ext}`;\n          callback(null, filename);\n        },\n      }),\n      fileFilter: (req, file, callback) => {\n        if (!file.originalname.match(/\\.(jpg|jpeg|png|gif)$/)) {\n          return callback(null, false);\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    if (!file) {\n      throw new BadRequestException(\"File is not an image.\");\n    } else {\n      console.log(file);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileUploadModule.html":{"url":"modules/FileUploadModule.html","title":"module - FileUploadModule","body":"\n                   \n\n\n\n\n    Modules\n    FileUploadModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\n\nFileUploadService\n\nFileUploadService\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mysql/file-upload/file-upload.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileUploadService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FileUploadController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileUploadController } from './file-upload.controller';\nimport { FileUploadService } from './file-upload.service';\n\n@Module({\n  controllers: [FileUploadController],\n  providers: [FileUploadService]\n})\nexport class FileUploadModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileUploadService.html":{"url":"injectables/FileUploadService.html","title":"injectable - FileUploadService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileUploadService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/file-upload/file-upload.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class FileUploadService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtGuard.html":{"url":"classes/JwtGuard.html","title":"class - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/guard/jwt.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/guard/jwt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from \"@nestjs/passport\";\n\nexport class JwtGuard extends AuthGuard(\"jwt\") {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/auth/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/mysql/auth/strategy/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/auth/strategy/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { PrismaService } from \"../../../prisma/prisma.service\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n  constructor(\n    config: ConfigService,\n    private prisma: PrismaService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: config.get(\"JWT_SECRET\"),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id: payload.sub,\n      },\n    });\n\n    if (!user) {\n      return null;\n    } else {\n      delete user.hash;\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseObjectIdPipePipe.html":{"url":"injectables/ParseObjectIdPipePipe.html","title":"injectable - ParseObjectIdPipePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseObjectIdPipePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/parse-object-id-pipe/parse-object-id-pipe.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/pipes/parse-object-id-pipe/parse-object-id-pipe.pipe.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ObjectId\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  Injectable,\n  PipeTransform,\n  BadRequestException,\n} from \"@nestjs/common\";\nimport { ObjectId } from \"mongodb\";\n\n@Injectable()\nexport class ParseObjectIdPipePipe implements PipeTransform {\n  public transform(value: any): ObjectId {\n    try {\n      const transformedObjectId: ObjectId = ObjectId.createFromHexString(value);\n      return transformedObjectId;\n    } catch (error) {\n      throw new BadRequestException(\"Validation failed (ObjectId is expected)\");\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { PrismaService } from \"./prisma.service\";\n\n@Global()\n@Module({\n  exports: [PrismaService],\n  providers: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cleanDb\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cleanDb\n                        \n                    \n                \n            \n            \n                \ncleanDb()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PrismaClient } from \"@prisma/client\";\n\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get(\"DATABASE_URL\"),\n        },\n      },\n    });\n    console.log(\"db connected\", config.get(\"DATABASE_URL\"));\n  }\n  cleanDb() {\n    this.$transaction([this.user.deleteMany(), this.bookmark.deleteMany()]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Product.html":{"url":"classes/Product.html","title":"class - Product","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Product\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/schemas/product.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/product.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'Category'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/product.schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/product.schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/product.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/product.schema.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport mongoose from \"mongoose\";\n// import { Category } from \"./category.schema\";\nimport { Category } from \"./index.schema\";\n\n@Schema({\n  timestamps: true,\n})\nexport class Product {\n  @Prop()\n  title: string;\n\n  @Prop()\n  description: string;\n\n  @Prop()\n  author: string;\n\n  @Prop()\n  price: number;\n\n  @Prop({ type: mongoose.Schema.Types.ObjectId, ref: \"Category\" })\n  category: Category;\n}\n\nexport const ProductSchema = SchemaFactory.createForClass(Product);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductController.html":{"url":"controllers/ProductController.html","title":"controller - ProductController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/product/product.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                product\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiTags } from \"@nestjs/swagger\";\n\n@ApiBearerAuth()\n@ApiTags(\"Products\")\n@Controller(\"product\")\nexport class ProductController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductModule.html":{"url":"modules/ProductModule.html","title":"module - ProductModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\n\nProductService\n\nProductService\n\n\n\nProductModule\n\nProductModule\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mongo/product/product.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProductService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { ProductController } from './product.controller';\n\n@Module({\n  providers: [ProductService],\n  controllers: [ProductController]\n})\nexport class ProductModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductService.html":{"url":"injectables/ProductService.html","title":"injectable - ProductService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/product/product.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ProductService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBookDto.html":{"url":"classes/UpdateBookDto.html","title":"class - UpdateBookDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBookDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/book/dto/update-book.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                author\n                            \n                            \n                                    \n                                    Readonly\n                                category\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                description\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                price\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/update-book.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/update-book.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/update-book.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/update-book.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/book/dto/update-book.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmpty,\n  IsEnum,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from \"class-validator\";\n\nimport { Category } from \"../../schemas/index.schema\";\n\nexport class UpdateBookDto {\n  @IsOptional()\n  @IsString()\n  readonly title: string;\n\n  @IsOptional()\n  @IsString()\n  readonly description: string;\n\n  @IsOptional()\n  @IsString()\n  readonly author: string;\n\n  @IsOptional()\n  @IsString()\n  readonly price: string;\n\n  @IsOptional()\n  readonly category: Category;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/user.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/user.schema.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/mongo/schemas/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\n@Schema({\n  timestamps: true,\n})\nexport class User extends Document {\n  @Prop()\n  name: string;\n\n  @Prop({ unique: [true, \"Duplicate email entered\"] })\n  email: string;\n\n  @Prop()\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                :- guard for all route means controller level -:\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                editUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getMe\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(userId: number, dto: EditUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/user/user.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(user: User, email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'user details', description: 'Get logged in user information using access token.'})@ApiResponse({status: 403, description: 'Forbidden.'})@ApiResponse({status: 200, description: 'The found record', type: EditUserDto})@HttpCode(200)@Get('me')\n                \n            \n\n                    \n                        \n                            Defined in src/mysql/user/user.controller.ts:62\n                        \n                    \n\n\n            \n                \n                        :- status code by number -:\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Patch,\n  Req,\n  UseGuards,\n} from \"@nestjs/common\";\nimport { User } from \"@prisma/client\";\nimport { Request } from \"express\";\nimport { GetUser } from \"../../decorator/index\";\nimport { JwtGuard } from \"../../guard/index\";\nimport { EditUserDto } from \"./dto/edit-user.dto\";\nimport { UserService } from \"./user.service\";\n\nimport {\n  ApiBearerAuth,\n  ApiBody,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from \"@nestjs/swagger\";\n\n/***:- guard for all route means controller level -:***/\n@ApiBearerAuth()\n@ApiTags(\"User\")\n@UseGuards(JwtGuard)\n@Controller(\"users\")\nexport class UserController {\n  constructor(private userService: UserService) {}\n  /***:- guard for single route -:***/\n  // @UseGuards(JwtGuard)\n\n  /***:- status code by name -:***/\n  //   @HttpCode(HttpStatus.OK)\n\n  /***:- status code by number -:***/\n  @ApiOperation({\n    summary: \"user details\",\n    description: \"Get logged in user information using access token.\",\n  })\n  @ApiResponse({ status: 403, description: \"Forbidden.\" })\n  @ApiResponse({\n    status: 200,\n    description: \"The found record\",\n    type: EditUserDto,\n  })\n  @HttpCode(200)\n  @Get(\"me\")\n\n  /***:- with the help request decorator -:***/\n  /*getMe(@Req() req: Request) {\n    console.log({\n      user: req.user,\n    });\n    return req.user;\n  }*/\n\n  /***:- with the help of custom decorator -:***/\n  getMe(@GetUser() user: User, @GetUser(\"email\") email: string) {\n    console.log({\n      email: email,\n    });\n    return user;\n  }\n\n  // @UseGuards(JwtGuard)\n  @Patch()\n  editUser(@GetUser(\"id\") userId: number, @Body() dto: EditUserDto) {\n    console.log(\"userId\", userId);\n    return this.userService.editUser(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mysql/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService]\n})\nexport class UserModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mysql/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                editUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/mysql/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        editUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    editUser(userId: number, dto: EditUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mysql/user/user.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            EditUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../../prisma/prisma.service\";\nimport { EditUserDto } from \"./dto/edit-user.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n  async editUser(userId: number, dto: EditUserDto) {\n    const user = await this.prisma.user.update({\n      where: {\n        id: userId,\n      },\n      data: { ...dto },\n    });\n    delete user.hash;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/decorator/auth.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guard/jwt.guard.ts\n            \n            class\n            JwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/book/book.controller.ts\n            \n            controller\n            BookController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/book/book.service.ts\n            \n            injectable\n            BookService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/mongo/book/dto/create-book.dto.ts\n            \n            class\n            CreateBookDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/book/dto/update-book.dto.ts\n            \n            class\n            UpdateBookDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/mongo/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mongo/category/dto/edit-category.dto.ts\n            \n            class\n            EditCategoryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mongo/product/product.controller.ts\n            \n            controller\n            ProductController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/product/product.service.ts\n            \n            injectable\n            ProductService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/schemas/book.schema.ts\n            \n            class\n            Book\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/schemas/book.schema.ts\n            \n            variable\n            BookSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/schemas/category.schema.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mongo/schemas/category.schema.ts\n            \n            variable\n            CategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/schemas/product.schema.ts\n            \n            class\n            Product\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mongo/schemas/product.schema.ts\n            \n            variable\n            ProductSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mongo/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mysql/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mysql/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/mysql/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mysql/auth/dto/auth.dto.ts\n            \n            class\n            AuthToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mysql/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mysql/bookmark/bookmark.controller.ts\n            \n            controller\n            BookmarkController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/mysql/bookmark/bookmark.service.ts\n            \n            injectable\n            BookmarkService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/mysql/bookmark/dto/create-bookmark.dto.ts\n            \n            class\n            CreateBookmarkDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mysql/bookmark/dto/edit-bookmark.dto.ts\n            \n            class\n            EditBookmarkDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mysql/file-upload/file-upload.controller.ts\n            \n            controller\n            FileUploadController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/mysql/file-upload/file-upload.service.ts\n            \n            injectable\n            FileUploadService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mysql/user/dto/edit-user.dto.ts\n            \n            class\n            EditUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/mysql/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/mysql/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/pipes/parse-object-id-pipe/parse-object-id-pipe.pipe.ts\n            \n            injectable\n            ParseObjectIdPipePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.0.2\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @prisma/client : ^5.7.1\n        \n            argon2 : ^0.31.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            mongoose : ^8.1.0\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Status   (src/.../category.schema.ts)\n                        \n                        \n                            Status   (src/.../create-category.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mongo/schemas/category.schema.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : Active\n                            \n                        \n                        \n                            \n                                 inactive\n                            \n                        \n                        \n                            \n                                Value : Inactive\n                            \n                        \n                        \n                            \n                                 deleted\n                            \n                        \n                        \n                            \n                                Value : Delete\n                            \n                        \n            \n        \n\n    src/mongo/category/dto/create-category.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : Active\n                            \n                        \n                        \n                            \n                                 inactive\n                            \n                        \n                        \n                            \n                                Value : Inactive\n                            \n                        \n                        \n                            \n                                 deleted\n                            \n                        \n                        \n                            \n                                Value : Delete\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookmarkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BookModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileUploadModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BookmarkModule\n\n\n\ncluster_BookmarkModule_providers\n\n\n\ncluster_BookModule\n\n\n\ncluster_BookModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_FileUploadModule\n\n\n\ncluster_FileUploadModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_ProductModule\n\n\n\ncluster_ProductModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBookModule\n\nBookModule\n\nAppModule -->\n\nBookModule->AppModule\n\n\n\n\n\nBookmarkModule\n\nBookmarkModule\n\nAppModule -->\n\nBookmarkModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFileUploadModule\n\nFileUploadModule\n\nAppModule -->\n\nFileUploadModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nProductModule\n\nProductModule\n\nAppModule -->\n\nProductModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBookmarkService\n\nBookmarkService\n\nBookmarkModule -->\n\nBookmarkService->BookmarkModule\n\n\n\n\n\nBookService\n\nBookService\n\nBookModule -->\n\nBookService->BookModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nFileUploadService\n\nFileUploadService\n\nFileUploadModule -->\n\nFileUploadService->FileUploadModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nProductService\n\nProductService\n\nProductModule -->\n\nProductService->ProductModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BookSchema   (src/.../book.schema.ts)\n                        \n                        \n                            CategorySchema   (src/.../category.schema.ts)\n                        \n                        \n                            GetUser   (src/.../auth.decorator.ts)\n                        \n                        \n                            ProductSchema   (src/.../product.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/mongo/schemas/book.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BookSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Book)\n                    \n                \n\n\n        \n    \n\n    src/mongo/schemas/category.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Category)\n                    \n                \n\n\n        \n    \n\n    src/decorator/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, ctx: ExecutionContext) => {\n    const request: Express.Request = ctx.switchToHttp().getRequest();\n    if (data) {\n      console.log(\"GetUser\", data);\n      return request.user[data];\n    } else {\n      return request.user;\n    }\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/mongo/schemas/product.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ProductSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Product)\n                    \n                \n\n\n        \n    \n\n    src/mongo/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
